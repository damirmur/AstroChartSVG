let fjs = window.fastJS;
let fEl = fjs.El;
let fAr = fjs.Arr;
Number.prototype.toRad = function () {
    return this * Math.PI / 180;
};

(function (astrology2D) {
    let a2d = astrology2D;
    a2d.locale = 'ru';
// ## Const #####################

    a2d.planetSwe = {"Sun": 0, "Moon": 1, "Mercury": 2, "Venus": 3, "Mars": 4, "Jupiter": 5, "Saturn": 6, "Uranus": 7, "Neptune": 8, "Pluto": 9, "Lilith": 12, "NNode": 11};
    a2d.HouseName = ['Asc', 'II', 'III', 'IC', 'V', 'VI', 'Ds', 'VIII', 'IX', 'Mc', 'XI', 'XII'];
    a2d.houseSys = {PLACIDUS: 'P', SUN_SIGN: 'S', KOCH: 'K', PORPHYRIUS: 'O', REGIOMONTANUS: 'R', CAMPANUS: 'C', EQUAL: 'E', VEHLOW: 'V', MERIDIAN: 'X', HORIZONTAL: 'H', POLICH_PAGE: 'T', ALCABITIUS: 'B', MORINUS: 'M', KRUSINSKI: 'U', WHOLE_SIGN: 'W'};
    a2d.PlAspStatus = ['unaspected', 'harmonic', 'stress', 'mixed'];
    a2d.aspMajor = [0, 60, 90, 120, 180];
    a2d.aspMinor = [30, 36, 40, 45, 72, 144, 135, 150];
    a2d.aspHarmonic = [0, 60, 120];
    a2d.aspStressful = [90, 180];
    a2d.aspNeitral = [];
    a2d.OBJStatistic = {};
    a2d.OBJStatistic['elements'] = {
        'fire': [0, 4, 8],
        'earth': [1, 5, 9],
        'air': [2, 6, 10],
        'water': [3, 7, 11],
    };

    a2d.OBJStatistic['cross'] = {
        'cardinal': [0, 3, 6, 9],
        'fixed': [1, 4, 7, 10],
        'mutable': [2, 5, 8, 11]
    };
    a2d.OBJStatistic['quadrants'] = {
//Quadrants I - childhood, II - youth, III - maturity and IV - old age
        'childhood': [0, 1, 2],
        'youth': [3, 4, 5],
        'maturity': [6, 7, 8],
        'oldness': [9, 10, 11],
    };

    a2d.OBJStatistic['zones'] = {
//Zones Creation, Stability, Transformation
        '—Åreation': [0, 1, 2, 3],
        'stability': [4, 5, 6, 7],
        'transformation': [8, 9, 10, 11]
    };
    a2d.aspOrb = {};
    a2d.aspOrb['Sun'] = {0: 12, 60: 6.5, 90: 10, 120: 12, 180: 12};
    a2d.aspOrb['Moon'] = {0: 10, 60: 6, 90: 8, 120: 10, 180: 10};
    a2d.aspOrb['Mercury'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Venus'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Mars'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Jupiter'] = {0: 8, 60: 5, 90: 7, 120: 8, 180: 8};
    a2d.aspOrb['Saturn'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Uranus'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Neptune'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Pluto'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['Lilith'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrb['NNode'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrbT = {};
    a2d.aspOrbT['Sun'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Moon'] = {0: 5, 60: 5, 90: 5, 120: 5, 180: 5};
    a2d.aspOrbT['Mercury'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Venus'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Mars'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Jupiter'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Saturn'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Uranus'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Neptune'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Pluto'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['Lilith'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspOrbT['NNode'] = {0: 2, 60: 2, 90: 2, 120: 2, 180: 2};
    a2d.aspDivergent = 0.66;
    // ## Setting #####################
    a2d.SVG = {};
    let svg = a2d.SVG;
    svg.colorAsp = {};
    svg.colorAsp[0] = "#00008B";
    svg.colorAsp[60] = "#27AE60";
    svg.colorAsp[90] = "#FF4500";
    svg.colorAsp[120] = "#27AE60";
    svg.colorAsp[180] = "#FF4500";
    'unaspected', 'harmonic', 'stress', 'mixed'
    svg.colorStatus = {};
    svg.colorAsp['unaspected'] = "#A52A2A";
    svg.colorAsp['harmonic'] = "#27AE60";
    svg.colorAsp['stress'] = "#FF4500";
    svg.colorAsp['mixed'] = "#00008B";
    //circle
    svg.vbh = 700;
    svg.vbw = 900;
    svg.cx = svg.vbh / 2;
    svg.cy = svg.vbh / 2;
    svg.rOutZ = 300;
    svg.rInZ = 250;
    svg.rOutR = 250;
    svg.rInR = 250;
    svg.rOutT = 300;
    svg.rInT = 120;
    svg.rotate = 0;
    svg.rEl = 12;
    svg.scaleEl = 1;
    svg.scalePl = 1;

//https://aydos.com/svgedit/
//
// 
    svg.signArr = [];
    svg.signArr[0] = ['aries', ' m21.7,11.46 -1.68-1.4c.747-.96 1.16-1.907 1.24-2.84.107-1.28-.2-2.267-.92-2.96-.747-.72-1.747-1.08-3-1.08-1.147 0-2.133.467-2.96 1.4-.853.96-1.28 2.013-1.28 3.16v15.28h-2.2v-15.28c0-1.173-.413-2.227-1.24-3.16s-1.827-1.4-3-1.4c-1.253 0-2.24.36-2.96 1.08s-1.013 1.693-.88 2.92c.08.96 .493 1.92 1.24 2.88-.4.293-.96.76-1.68 1.4-1.227-1.547-1.84-3.147-1.84-4.8 0-1.68.6-3.053 1.8-4.12 1.173-1.04 2.613-1.56 4.32-1.56 2.053 0 3.84 1.04 5.36 3.12 1.52-2.08 3.307-3.12 5.36-3.12 1.733 0 3.173.52 4.32 1.56 1.173 1.067 1.76 2.44 1.76 4.12 0 1.653-.587 3.253-1.76 4.8z'];
    svg.signArr[1] = ['taurus', ' m18.253 19.808 0 .032c-1.642 1.663-3.715 2.495-6.221 2.495-2.246 0-4.201-.713-5.864-2.138-1.728-1.512-2.592-3.38-2.592-5.605 0-2.873 1.49-5.141 4.471-6.804-2.506-1.512-3.812-3.553-3.92-6.124h1.879c.108 2.268 1.285 3.845 3.532 4.73.821 .302 1.663.454 2.527.454 1.814 0 3.316-.594 4.504-1.782.907-.929 1.404-2.063 1.49-3.402.41 0 1.037.011 1.879.032-.108 2.57-1.404 4.601-3.888 6.091 2.916 1.663 4.374 3.899 4.374 6.707v.097c-.022 2.052-.745 3.791-2.171 5.216zm-6.221-11.016c-1.728 0-3.229.54-4.504 1.62-1.361 1.102-2.041 2.506-2.041 4.212s.68 3.132 2.041 4.277c1.274 1.058 2.786 1.588 4.536 1.588 1.706 0 3.197-.54 4.471-1.62 1.361-1.123 2.041-2.538 2.041-4.244s-.68-3.121-2.041-4.244c-1.274-1.058-2.776-1.588-4.504-1.588z'];
    svg.signArr[2] = ['gemini', ' m4.208 2.352v1.856h3.808v15.616h-3.808v1.824h15.584v-1.824h-3.904v-15.616h3.904v-1.856h-15.584zm9.824 17.472h-4.16v-15.616h4.16v15.616z'];
    svg.signArr[3] = ['cancer', ' m18.894 17.814v.036c-1.8 1.584-4.092 2.376-6.876 2.376-1.776-.024-3.792-.744-6.048-2.16 1.296-.216 2.328-.672 3.096-1.368.864-.792 1.296-1.8 1.296-3.024 0-1.152-.42-2.16-1.26-3.024-.84-.84-1.848-1.26-3.024-1.26s-2.196.42-3.06 1.26c-.84.864-1.26 1.872-1.26 3.024 0 2.256 1.152 4.248 3.456 5.976 2.088 1.536 4.356 2.304 6.804 2.304 3.24 0 5.904-.924 7.992-2.772zm-6.876-15.768c-3.24 0-5.904.924-7.992 2.772l1.116 1.332c1.848-1.584 4.14-2.364 6.876-2.34 1.896.024 3.9.732 6.012 2.124-1.248.192-2.268.648-3.06 1.368-.864.792-1.296 1.788-1.296 2.988s.42 2.22 1.26 3.06 1.848 1.26 3.024 1.26 2.184-.42 3.024-1.26 1.26-1.86 1.26-3.06c0-2.256-1.128-4.236-3.384-5.94-2.088-1.536-4.368-2.304-6.84-2.304zm7.74 10.08h.036c-.504.48-1.116.72-1.836.72s-1.32-.24-1.8-.72c-.504-.504-.756-1.116-.756-1.836 0-.672.252-1.26.756-1.764.48-.504 1.08-.756 1.8-.756.696 0 1.296.252 1.8.756 .504.48 .756 1.056.756 1.728 0 .744-.252 1.368-.756 1.872zm-11.844 3.384h.036c-.504.504-1.116.756-1.836.756-.696 0-1.296-.252-1.8-.756-.504-.48-.756-1.08-.756-1.8 0-.696.252-1.284.756-1.764.504-.528 1.104-.792 1.8-.792s1.296.252 1.8.756c.48.48 .72 1.068.72 1.764 0 .744-.24 1.356-.72 1.836z'];
    svg.signArr[4] = ['leo', ' m14.258 17.959c0-1.771.83-3.729 2.49-5.876 1.328-1.726 1.992-3.22 1.992-4.482 0-2.125-.852-3.563-2.556-4.316-.575-.243-1.162-.365-1.76-.365-1.217 0-2.213.409-2.988 1.228-.753.797-1.129 1.793-1.129 2.988 0 .531.188 1.361.564 2.49.598 1.638.896 3.276.896 4.914 0 .443-.022.764-.066.963-.155 1.35-.631 2.446-1.428 3.287-.819.841-1.881 1.262-3.187 1.262-1.262 0-2.346-.454-3.254-1.361-.885-.885-1.328-1.97-1.328-3.254 0-1.239.443-2.313 1.328-3.22.907-.907 1.992-1.361 3.254-1.361.62 0 1.45.221 2.49.664-.177-.465-.421-1.173-.73-2.125-.31-.819-.465-1.56-.465-2.224-.022-1.682.564-3.121 1.76-4.316 1.173-1.195 2.612-1.793 4.316-1.793 1.837 0 3.409.741 4.714 2.224.952 1.107 1.428 2.556 1.428 4.349 0 1.461-.653 3.132-1.959 5.013-.841 1.217-1.35 1.981-1.527 2.291-.553.863-.874 1.693-.963 2.49-.155.974 .022 1.826.531 2.556.553 .708 1.317 1.062 2.291 1.062.531 0 1.073-.122 1.627-.365.177 .354.476 .896.896 1.627-.841.421-1.682.631-2.523.631-.907 0-1.771-.243-2.59-.73-1.417-.885-2.125-2.302-2.125-4.25zm-5.246-4.416.033 .033c-.553-.575-1.206-.863-1.959-.863s-1.394.277-1.926.83c-.531.509-.797 1.14-.797 1.892s.266 1.405.797 1.959c.531.509 1.173.764 1.926.764 .841 0 1.527-.31 2.058-.93.553-.642.775-1.383.664-2.224-.066-.553-.332-1.04-.797-1.461z'];
    svg.signArr[5] = ['virgo', ' m21.429 13.809 -5.146 5.113v3.984h-1.726v-2.291c-.288.31-.874.896-1.76 1.76l-1.195-1.195 2.955-2.988v-12.915c-.266-.288-.83-.863-1.693-1.726-.31.288-.896.863-1.76 1.726v14.442h-1.726v-14.442c-.31-.288-.896-.863-1.76-1.726l-1.693 1.726v14.442h-1.76v-14.442c0-1.239-.531-1.948-1.594-2.125v-.996h1.594l1.195 1.228 2.258-2.258 2.623 2.556 2.59-2.59 3.453 3.42c.62-.266 1.195-.398 1.726-.398.952 0 1.76.332 2.424.996s.996 1.472.996 2.424v6.275zm-3.154-7.968c-.487-.066-.941.077-1.361.432s-.631.775-.631 1.262v8.964l3.386-3.42v-5.544c0-.376-.122-.741-.365-1.096-.266-.354-.609-.553-1.029-.598z'];
    svg.signArr[6] = ['libre', ' m13.245 13.975c0-.288.011-.852.033-1.693 1.372-.62 2.058-1.66 2.058-3.121 0-.952-.332-1.737-.996-2.357-.642-.642-1.428-.963-2.357-.963-.952 0-1.737.321-2.357.963-.664.642-.996 1.439-.996 2.39 0 1.417.697 2.435 2.092 3.054v1.726h-8.2v-1.627c.93 0 2.789-.011 5.578-.033-.73-1.062-1.096-2.103-1.096-3.121 0-1.394.487-2.579 1.461-3.552s2.147-1.461 3.519-1.461c1.394 0 2.579.487 3.552 1.461.952 .974 1.428 2.158 1.428 3.552 0 1.04-.354 2.092-1.062 3.154h5.578v1.627h-8.234zm-10.724 5.843v-1.66h18.957v1.66h-18.957z'];
    svg.signArr[7] = ['scorpio', ' m20.35 22.143 0-2.922c-.199.221-.564.664-1.096 1.328-.111.155-.277.365-.498.631-.841 1.062-1.693 1.594-2.556 1.594-.819 0-1.505-.354-2.058-1.062-.553-.664-.83-1.494-.83-2.49v-14.409c0-.598-.177-1.107-.531-1.527-.332-.443-.741-.664-1.228-.664-.509 0-.93.221-1.262.664-.354.421-.531.93-.531 1.527v15.737h-1.162c.022-2.612.033-7.857.033-15.737 0-.598-.177-1.107-.531-1.527-.354-.443-.764-.664-1.228-.664-.487 0-.907.221-1.262.664-.354.421-.531.93-.531 1.527v15.737h-1.162v-15.704c0-.62-.122-1.173-.365-1.66-.243-.509-.587-.819-1.029-.93v-.564h1.195l.764.93c.797-.93 1.583-1.394 2.357-1.394s1.571.465 2.39 1.394c.775-.93 1.549-1.394 2.324-1.394.797 0 1.472.354 2.025 1.062.575 .686.863 1.527.863 2.523 0 3.143-.011 7.868-.033 14.176 0 .62.177 1.184.531 1.693.354 .465.786 .697 1.295.697 .332 0 .741-.199 1.228-.598l2.191-2.689h-2.623v-1.394h4.449v5.445h-1.129z'];
    svg.signArr[8] = ['sagittarius', ' m18.955 11.519 0-5.611-8.864 9.495 2.556 2.689c-.221.221-.62.642-1.195 1.262-.443-.443-1.284-1.339-2.523-2.689l-4.349 4.648-1.195-1.295 4.349-4.615c-.443-.443-1.295-1.35-2.556-2.722l1.162-1.262 2.59 2.689 8.964-9.562h-5.511v-1.859h8.234v8.831h-1.66z'];
    svg.signArr[9] = ['capricorn', ' m20.466 8.995c-.664.708-1.461 1.062-2.39 1.062h-1.062c.642 1.085 1.627 2.501 2.955 4.25.553 .775.83 1.693.83 2.756 0 1.262-.398 2.324-1.195 3.187-.819.885-1.804 1.328-2.955 1.328-.819 0-1.594-.221-2.324-.664l.1.398c-.022-.066-.077-.221-.166-.465-.111-.199-.166-.343-.166-.432 0-.487.177-.73.531-.73.243 0 .642.122 1.195.365 .354.133 .631.199 .83.199 .819 0 1.516-.321 2.092-.963.531-.62.786-1.361.764-2.224 0-.819-.177-1.461-.531-1.926l-1.959-2.623c-.664-.952-1.184-1.915-1.56-2.888-1.328-.531-2.457-1.549-3.386-3.054l-2.756 14.542h-2.058l-4.714-16.102h2.025l3.685 12.981 2.955-15.571h1.295c-.022.044-.033.1-.033.166-.044.199-.066.387-.066.564 0 1.239.786 2.689 2.357 4.349v-1.062c0-.996.321-1.848.963-2.556.664-.708 1.461-1.062 2.39-1.062s1.726.354 2.39 1.062c.642.708 .963 1.56.963 2.556 0 1.018-.332 1.87-.996 2.556zm-.93-4.15v-.033c-.332-.376-.697-.587-1.096-.631-.62-.089-1.195.1-1.726.564-.509.465-.764 1.029-.764 1.693 0 .575.111 1.217.332 1.926.642 .243 1.228.365 1.76.365 .575 0 1.062-.221 1.461-.664.443-.443.664-.985.664-1.627 0-.62-.21-1.151-.631-1.594z'];
    svg.signArr[10] = ['aquarius', ' m22.26 11.08 -5.08-5.4-5.12 5.4-5.16-5.4-5.2 5.4-1.52-1.6 6.72-7 5.16 5.36 5.12-5.36 6.64 7c-.24.267-.76.8-1.56 1.6zm0 10.44-5.08-5.36-5.12 5.36-5.16-5.36-5.2 5.36-1.52-1.64 6.72-7 5.16 5.36 5.12-5.36 6.64 7c-.24.267-.76.813-1.56 1.64z'];
    svg.signArr[11] = ['pisces', ' m16.698 20.217 .033 0c-1.749-1.793-2.789-4.161-3.121-7.105-.708 0-1.782-.011-3.22-.033-.288 2.435-1.051 4.526-2.291 6.275-1.483 1.992-3.331 3.032-5.544 3.121 0-.487-.011-1.228-.033-2.224 2.39-.133 4.106-1.693 5.146-4.681.288-.841.487-1.66.598-2.457h-5.71v-2.191h5.71c-.398-2.988-1.549-5.135-3.453-6.441-.664-.443-1.417-.686-2.258-.73 0-.509-.011-1.251-.033-2.224 1.638.066 3.099.686 4.382 1.859 1.151 1.062 2.036 2.435 2.656 4.117.421 1.129.697 2.269.83 3.42h3.22c.465-4.095 2.058-6.928 4.781-8.499.907-.531 1.937-.819 3.088-.863v2.224c-2.368.133-4.073 1.693-5.113 4.681-.288.819-.487 1.638-.598 2.457h5.71v2.191c-.952 0-2.855-.011-5.71-.033.398 2.988 1.549 5.135 3.453 6.441.664 .443 1.417.686 2.258.73-.022.487-.033 1.217-.033 2.191-1.771-.044-3.353-.786-4.748-2.224z'];
    svg.plArr = [];
    svg.plArr[0] = ['Sun', ' m19.247 4.835v.028c-1.984-2.021-4.4-3.031-7.247-3.031-2.829 0-5.236.992-7.22 2.976-2.002 1.966-3.004 4.363-3.004 7.192 0 2.811 1.001 5.208 3.004 7.192 1.984 1.984 4.391 2.976 7.22 2.976s5.236-.992 7.22-2.976c2.002-1.984 3.004-4.381 3.004-7.192s-.992-5.199-2.976-7.165zm-7.247 15.514c-2.333 0-4.317-.808-5.952-2.425s-2.452-3.591-2.452-5.925.818-4.308 2.452-5.925 3.619-2.425 5.952-2.425c2.351 0 4.335.808 5.952 2.425 1.635 1.617 2.452 3.601 2.452 5.952 0 1.396-.331 2.71-.992 3.941-.68 1.249-1.598 2.26-2.756 3.031-1.396.9-2.948 1.35-4.657 1.35zm.028-6.751c.423 0 .79-.156 1.102-.468s.468-.68.468-1.102c0-.441-.156-.808-.468-1.102s-.68-.441-1.102-.441c-.441 0-.818.147-1.13.441-.294.294-.441.661-.441 1.102 0 .423.147 .79.441 1.102.312 .312.689 .468 1.13.468z'];
    svg.plArr[1] = ['Moon', ' m10.595 1.846v-.028c-2.958 0-5.52 1.084-7.688 3.252 2.186.092 4.106.716 5.759 1.874 1.911 1.286 2.866 2.967 2.866 5.043s-.955 3.775-2.866 5.098c-1.635 1.157-3.555 1.782-5.759 1.874 2.186 2.149 4.74 3.224 7.661 3.224 2.094 0 4.023-.56 5.787-1.681 1.764-1.102 3.068-2.609 3.913-4.519.551-1.194.827-2.508.827-3.941 0-2.866-1.038-5.282-3.114-7.247-2.058-1.966-4.519-2.948-7.385-2.948zm0 18.435-.028-.028c-.772 0-1.727-.138-2.866-.413 3.784-1.966 5.677-4.593 5.677-7.881 0-3.252-1.892-5.86-5.677-7.826 1.121-.294 2.085-.441 2.893-.441 2.351 0 4.372.799 6.062 2.397s2.535 3.564 2.535 5.897-.845 4.299-2.535 5.897-3.711 2.397-6.062 2.397z'];
    svg.plArr[2] = ['Mercury', ' m12.84 15.541 0 3.141h3.224v1.708h-3.224v2.452h-1.681v-2.452h-3.224v-1.708h3.224c0-.514-.009-1.562-.028-3.141-1.451-.257-2.636-.909-3.555-1.956-.919-1.066-1.378-2.315-1.378-3.748 0-1.911.854-3.509 2.563-4.795-1.635-.992-2.48-2.287-2.535-3.885h1.708c.129 1.929 1.488 2.893 4.078 2.893 1.066 0 1.956-.22 2.673-.661.827-.496 1.304-1.24 1.433-2.232h1.681c-.073 1.635-.928 2.912-2.563 3.83 1.708 1.323 2.554 2.948 2.535 4.877-.018 1.451-.478 2.691-1.378 3.72s-2.085 1.681-3.555 1.956zm2.039-8.597 0-.028c-.79-.79-1.745-1.185-2.866-1.185-1.139 0-2.113.395-2.921 1.185-.79.79-1.185 1.764-1.185 2.921 0 1.121.395 2.085 1.185 2.893.808 .79 1.773 1.185 2.893 1.185 1.139 0 2.113-.395 2.921-1.185s1.212-1.754 1.212-2.893c0-1.157-.413-2.122-1.24-2.893z'];
    svg.plArr[3] = ['Venus', ' m16.092 12.441c.018 0 .028.009 .028.028-.845.845-1.929 1.387-3.252 1.626v3.196h3.252v1.708h-3.252v2.48h-1.736v-2.48h-3.279v-1.708h3.279v-3.196c-1.47-.257-2.664-.909-3.582-1.956-.919-1.066-1.378-2.333-1.378-3.803 0-1.635.56-3.013 1.681-4.133 1.139-1.121 2.517-1.681 4.133-1.681s2.994.56 4.133 1.681 1.708 2.498 1.708 4.133c0 1.598-.579 2.967-1.736 4.106zm-1.157-6.999h.028c-.808-.808-1.791-1.212-2.948-1.212-1.139 0-2.103.404-2.893 1.212-.808.79-1.212 1.764-1.212 2.921 0 1.139.404 2.113 1.212 2.921s1.782 1.212 2.921 1.212 2.113-.395 2.921-1.185c.808-.808 1.212-1.782 1.212-2.921 0-1.157-.413-2.14-1.24-2.948z'];
    svg.plArr[4] = ['Mars', ' m19.357 11.394v-5.456l-5.704 5.704c.753 1.139 1.13 2.315 1.13 3.527 0 1.653-.569 3.059-1.708 4.216-1.157 1.157-2.563 1.736-4.216 1.736s-3.059-.579-4.216-1.736c-1.139-1.157-1.708-2.563-1.708-4.216s.579-3.05 1.736-4.189c1.157-1.157 2.563-1.736 4.216-1.736 1.249 0 2.425.395 3.527 1.185l5.814-5.842h-5.677v-1.708h8.515v8.515h-1.708zm-7.495.827c-.018 0-.028.009-.028.028-.863-.845-1.865-1.268-3.004-1.268-1.176 0-2.168.413-2.976 1.24s-1.212 1.819-1.212 2.976.413 2.149 1.24 2.976c.845.827 1.837 1.24 2.976 1.24 1.157 0 2.159-.413 3.004-1.24.827-.827 1.24-1.828 1.24-3.004 0-1.139-.413-2.122-1.24-2.948z'];
    svg.plArr[5] = ['Jupiter', ' m16.313 15.996 0 5.153h-1.819v-5.153h-9.507c.018-.312.028-.937.028-1.874 2.002-.937 3.371-2.315 4.106-4.133.202-.496.303-.974.303-1.433 0-1.212-.45-2.168-1.35-2.866-.808-.643-1.837-.983-3.086-1.02v-1.819c1.782.073 3.242.588 4.381 1.543 1.249 1.047 1.874 2.425 1.874 4.133 0 1.782-1.029 3.683-3.086 5.704h6.338v-8.46h1.819v8.46h2.7v1.764h-2.7z'];
    svg.plArr[6] = ['Saturn', ' m18.449 15.167 0-.028c-.165.294-.606.892-1.323 1.792-.864 1.102-1.295 2.167-1.295 3.196 0 .973.367 1.792 1.102 2.453.129 .11.202 .266.22 .469 0 .202-.055.358-.165.469-.183.183-.367.276-.551.276-.129 0-.257-.055-.386-.165-.551-.459-.992-1.277-1.323-2.453-.147-.551-.22-.9-.22-1.047 0-1.359.423-2.527 1.267-3.5.973-1.158 1.635-2.213 1.984-3.169.129-.312.193-.661.193-1.047 0-.514-.101-.965-.304-1.351-.753-1.506-1.929-2.259-3.528-2.259-.864 0-1.653.239-2.37.717s-1.24 1.111-1.571 1.901v8.046h-1.625v-15.155h-3.83v-1.625h3.83v-2.48h1.625v2.48h3.775v1.625h-3.775c0 .753-.01 2.241-.028 4.464 1.323-1.047 2.664-1.571 4.023-1.571 1.341 0 2.527.487 3.554 1.46 1.029.955 1.543 2.104 1.543 3.445 0 1.029-.276 2.048-.827 3.059z'];
    svg.plArr[7] = ['Uranus', ' m17.372 12.73v-4.602h-4.464v5.236c1.194.294 2.167.882 2.92 1.764.771 .9 1.158 1.939 1.158 3.114 0 1.378-.487 2.553-1.46 3.528s-2.14 1.46-3.5 1.46c-1.378 0-2.553-.487-3.528-1.46s-1.46-2.149-1.46-3.528c0-1.176.386-2.213 1.158-3.114.753-.882 1.718-1.47 2.894-1.764v-5.236h-4.464v4.602h-1.846v-11.959h1.846v5.511h4.464v-4.354h1.819v4.354h4.464v-5.511h1.846v11.959h-1.846zm-3.169 3.334 0 .028c-.624-.643-1.359-.965-2.205-.965-.882 0-1.617.304-2.205.91-.606.606-.91 1.341-.91 2.205 0 .882.304 1.625.91 2.233.588 .606 1.323.91 2.205.91 .864 0 1.599-.304 2.205-.91.606-.588.918-1.323.937-2.205 0-.827-.312-1.561-.937-2.205z'];
    svg.plArr[8] = ['Neptune', ' m18.82 11.27c-1.58 1.58-3.546 2.517-5.897 2.811v2.728h4.271v1.901h-4.271v3.252h-1.874v-3.252h-4.381v-1.901h4.381c0-.459.009-1.369.028-2.728-1.855-.239-3.5-.9-4.933-1.984-1.433-1.066-2.489-2.462-3.169-4.189-.441-1.084-.661-2.241-.661-3.472v-2.397h1.874v2.397c0 1.984.652 3.702 1.956 5.153 1.286 1.451 2.921 2.315 4.905 2.59v-10.085h1.874v10.113c1.47-.239 2.774-.799 3.913-1.681 1.139-.863 1.966-1.975 2.48-3.334.312-.845.468-1.764.468-2.756v-2.397h1.874c0 .404.009 1.194.028 2.37v.165c0 2.572-.955 4.804-2.866 6.696z'];
    svg.plArr[9] = ['Pluto', ' m15.059 8.589c-.606.569-1.13.928-1.571 1.075-.294.129-.79.193-1.488.193-1.212 0-2.232-.423-3.059-1.268s-1.24-1.865-1.24-3.059c0-1.212.423-2.232 1.268-3.059s1.874-1.24 3.086-1.24c1.194 0 2.204.423 3.031 1.268.827 .827 1.24 1.846 1.24 3.059 0 1.176-.423 2.186-1.268 3.031zm-2.204 5.952v3.141h4.381v1.764h-4.381v3.417h-1.791v-3.417h-4.354v-1.764h4.354c0-.514.009-1.552.028-3.114-2.351-.312-4.28-1.295-5.787-2.948-1.488-1.672-2.269-3.702-2.342-6.09h1.708c.055 2.058.781 3.784 2.177 5.181 1.378 1.396 3.095 2.094 5.153 2.094s3.784-.707 5.181-2.122c1.378-1.396 2.085-3.114 2.122-5.153h1.736c-.055 2.407-.836 4.437-2.342 6.09-1.506 1.635-3.454 2.609-5.842 2.921zm.992-10.829v-.028c-.478-.478-1.084-.716-1.819-.716-.716 0-1.323.248-1.819.744-.514.496-.772 1.102-.772 1.819s.257 1.323.772 1.819c.496.496 1.102.744 1.819.744s1.323-.248 1.819-.744.744-1.102.744-1.819-.248-1.323-.744-1.819z'];
    svg.plArr[10] = ['', ''];
    svg.plArr[11] = ['NNode', ' m18.175 22.373.034 0c-1.129 0-2.102-.399-2.922-1.195-.796-.796-1.195-1.759-1.195-2.888 0-.553.111-1.118.333-1.693l2.29-5.976c.243-.642.365-1.317.365-2.025 0-1.439-.487-2.645-1.46-3.619-.996-.973-2.202-1.46-3.619-1.46s-2.623.498-3.619 1.494c-.996 1.018-1.494 2.224-1.494 3.619 0 .553.143 1.217.431 1.992l2.224 5.943c.243.642 .365 1.206.365 1.693 0 1.129-.399 2.092-1.195 2.888-.796.819-1.759 1.229-2.888 1.229s-2.092-.399-2.888-1.195c-.819-.796-1.229-1.759-1.229-2.888s.41-2.102 1.229-2.922c.796-.796 1.759-1.195 2.888-1.195h.233c.088 0 .288.011 .598.034l-1.095-2.888c-.376-1.018-.564-1.925-.564-2.723 0-1.948.686-3.596 2.058-4.947s3.033-2.025 4.98-2.025 3.596.675 4.947 2.025 2.025 2.999 2.025 4.947c0 .886-.188 1.804-.564 2.755l-1.095 2.855c.333-.022.542-.034.631-.034h.199c1.129 0 2.092.399 2.888 1.195.819 .796 1.229 1.759 1.229 2.888s-.41 2.092-1.229 2.888c-.796.819-1.759 1.229-2.888 1.229zm.399-6.308c-.664-.066-1.261.111-1.793.531-.51.42-.764.973-.764 1.66 0 .598.211 1.118.631 1.56.42 .42.941 .631 1.56.631s1.14-.211 1.56-.631c.442-.442.664-.963.664-1.56 0-.531-.188-1.007-.564-1.428-.354-.442-.786-.698-1.295-.764zm-11.687.233c-.111-.066-.254-.122-.431-.166s-.376-.066-.598-.066c-.598 0-1.118.211-1.56.631-.42.42-.631.941-.631 1.56 0 .598.211 1.118.631 1.56.42 .42.93 .631 1.528.631 .619 0 1.151-.188 1.594-.564.465-.376.675-.907.631-1.594.045-.907-.343-1.571-1.161-1.992z'];
    svg.plArr[12] = ['Lilith', ' m11.534 14.208 0 4.416h-3.951v1.992h3.951v2.988h1.992v-2.988h3.951v-1.992h-3.951c0-.753.011-2.224.034-4.416 1.859-.333 3.464-1.073 4.814-2.224-.664.133-1.306.199-1.925.199-3.607-.155-5.865-.686-6.772-1.594s-1.361-2.036-1.361-3.387c0-1.372.686-2.512 2.058-3.419 1.351-.907 3.364-1.339 6.042-1.295.642 0 1.295.077 1.959.233-1.748-1.549-3.707-2.324-5.876-2.324-1.925 0-3.552.675-4.881 2.025s-1.992 2.988-1.992 4.913c0 1.727.553 3.22 1.66 4.482s2.523 2.058 4.249 2.39z'];
    svg.houseArr = [];
    svg.houseArr[0] = ['h1', ' m21.03 17.281c0 1-.208 1.813-.625 2.438-.458.688-1.083 1.031-1.875 1.031-2 0-3-2.031-3-6.094 0-1.938.25-3.542.75-4.813.583-1.458 1.406-2.188 2.469-2.188.625 0 1.125.323 1.5.969 .396.625 .594 1.427.594 2.406l-.594.5c0-.813-.115-1.51-.344-2.094-.271-.667-.656-1-1.156-1-1.146 0-1.719 2.073-1.719 6.219 0 3.563.563 5.344 1.688 5.344 1.146 0 1.719-.979 1.719-2.938.125 .042.323 .115.594 .219zm-6.219 0c0 1.042-.26 1.896-.781 2.563-.458.604-.969.906-1.531.906-1.542 0-2.313-1.156-2.313-3.469.146-.042.354-.115.625-.219 0 2.063.552 3.094 1.656 3.094.792 0 1.188-.698 1.188-2.094 0-.896-.271-1.688-.813-2.375l-1.531-1.656c-.542-.771-.813-1.729-.813-2.875 0-1.104.188-1.969.563-2.594s.854-.938 1.438-.938c.646 0 1.156.323 1.531.969 .375.625 .563 1.427.563 2.406-.125.125-.313.292-.563.5 0-.813-.115-1.51-.344-2.094-.271-.708-.667-1.063-1.188-1.063-.771 0-1.156.708-1.156 2.125 0 .917.302 1.688.906 2.313l1.656 1.563c.604.729 .906 1.708.906 2.937zm-4.968 3.407h-1.875l-.625-4.438h-2.969c-.104.75-.323 2.229-.656 4.438h-.75l2.75-17.438h1.406zm-2.719-5.532-1.375-8.75c-.188 1.458-.594 4.375-1.219 8.75h2.594z'];
    svg.houseArr[1] = ['h2', ' m13.469 21.766v-19.531h1.406v19.531h-1.406zm-2.937 0v-19.531h-1.406v19.531h1.406z'];
    svg.houseArr[2] = ['h3', ' m14.359 21.375v-18.75h1.813v18.75h-1.813zm-4.75 0v-18.75h-1.781v18.75h1.781zm3.344 0v-18.75h-1.781v18.75h1.781z'];
    svg.houseArr[3] = ['h4', ' m17.952 15.265c0 1.625-.427 2.948-1.281 3.969-.792.917-1.708 1.375-2.75 1.375-1.542 0-2.719-.781-3.531-2.344-.75-1.438-1.125-3.365-1.125-5.781 0-2.5.406-4.594 1.219-6.281.896-1.875 2.135-2.813 3.719-2.813 2.146 0 3.292 1.646 3.438 4.938-.271.167-.656.417-1.156.75v-.938c0-1-.167-1.833-.5-2.5-.375-.792-.906-1.188-1.594-1.188-1.167 0-2.01.969-2.531 2.906-.354 1.354-.531 3.031-.531 5.031 0 1.792.188 3.333.563 4.625.521 1.771 1.323 2.656 2.406 2.656.813 0 1.458-.5 1.938-1.5.438-.917.656-2.01.656-3.281v-.844l1.063.344v.875zm-9.875 5.344h-2.031v-17h2.031v17z'];
    svg.houseArr[4] = ['h5', ' m11.062 20.828-5.156-17.656h1.938l3.438 12.813c.021.042 .26 1.021.719 2.937.167-.854.396-1.823.687-2.906l3.625-12.844h1.781l-5.219 17.656h-1.813z'];
    svg.houseArr[5] = ['h6', ' m18.531 21.344v-18.75h-1.406v18.75h1.406zm-8.593.062-4.469-18.75h1.656l3 13.594c0 .042.198 1.073.594 3.094.146-.896.354-1.917.625-3.063l3.125-13.625h1.563l-4.531 18.75h-1.563z'];
    svg.houseArr[6] = ['h7', ' m20.438 16.719c0 1-.208 1.813-.625 2.438-.438.688-1.042 1.031-1.813 1.031-1.938 0-2.906-2.031-2.906-6.094 0-1.938.24-3.552.719-4.844.563-1.438 1.365-2.156 2.406-2.156.604 0 1.094.323 1.469.969 .375.625 .563 1.427.563 2.406-.125.104-.313.271-.563.5 0-.813-.115-1.51-.344-2.094-.271-.688-.646-1.031-1.125-1.031-1.104 0-1.656 2.083-1.656 6.25 0 3.563.542 5.344 1.625 5.344 1.104 0 1.656-.979 1.656-2.938.125 .042.323 .115.594 .219zm-6.063 0c0 1.042-.25 1.896-.75 2.563-.438.604-.927.906-1.469.906-1.5 0-2.25-1.156-2.25-3.469.146-.042.344-.115.594-.219 0 2.063.531 3.094 1.594 3.094.771 0 1.156-.698 1.156-2.094 0-.896-.26-1.688-.781-2.375l-1.469-1.656c-.542-.771-.813-1.74-.813-2.906 0-1.083.188-1.938.563-2.563.354-.625.823-.938 1.406-.938.625 0 1.125.323 1.5.969 .354.625 .531 1.427.531 2.406-.125.104-.313.271-.563.5 0-.813-.115-1.51-.344-2.094-.25-.708-.625-1.063-1.125-1.063-.75 0-1.125.708-1.125 2.125 0 .917.292 1.688.875 2.313l1.594 1.563c.583.729 .875 1.708.875 2.937zm-10.812 3.875 0-17.188h2.281c.479 0 .865.094 1.156.281 .875.521 1.458 1.906 1.75 4.156.188 1.25.281 2.604.281 4.063 0 1.521-.094 2.917-.281 4.188-.208 1.5-.531 2.625-.969 3.375-.417.75-1.031 1.125-1.844 1.125h-2.375zm.875-2h1.406c.771 0 1.313-.417 1.625-1.25.438-1.188.656-3.01.656-5.469 0-3.292-.385-5.313-1.156-6.063-.25-.25-.635-.375-1.156-.375h-1.375v13.156z'];
    svg.houseArr[7] = ['h8', ' m19.453 21.423v-18.75h-1.406v18.75h1.406zm-4.875 0v-18.75h-1.375v18.75h1.375zm2.406 0v-18.75h-1.406v18.75h1.406zm-8.812 0-3.625-18.844h1.344l2.406 13.656c.021.042 .188 1.083.5 3.125.125-.896.292-1.927.5-3.094l2.5-13.688h1.25l-3.625 18.844h-1.25z'];
    svg.houseArr[8] = ['h9', ' m6.687 21.359v-18.75h-1.469v18.75h1.469zm1.281.032 4.563-9.688-4-8.875h1.844l2.156 4.781c.396.896 .708 1.646.938 2.25.292-.729.604-1.438.938-2.125l2.344-4.906h1.688l-4.125 8.75 4.469 9.813h-1.938l-2.969-6.625c-.083-.229-.25-.635-.5-1.219l-.563 1.344-2.938 6.5h-1.906z'];
    svg.houseArr[9] = ['h10', ' m21.249 15.5c0 1.646-.312 2.917-.937 3.812-.646.917-1.552 1.375-2.719 1.375-1.542 0-2.698-.802-3.469-2.406-.688-1.417-1.031-3.344-1.031-5.781 0-2.583.396-4.708 1.188-6.375.875-1.875 2.115-2.813 3.719-2.813.917 0 1.677.406 2.281 1.219.583 .813.875 1.854.875 3.125-.167.125-.417.302-.75.531 0-2.563-.802-3.844-2.406-3.844-1.125 0-1.885.99-2.281 2.969-.229 1.104-.344 2.792-.344 5.063 0 4.896.813 7.344 2.438 7.344 1.792 0 2.688-1.552 2.688-4.656.167 .083.417 .229.75 .438zm-9.594 5.094h-2.156v-13.438l-2.281 13.438h-1.25l-2.313-13.281v13.281h-.906v-17.219h2.219l2.25 12.594 2.281-12.594h2.156v17.219z'];
    svg.houseArr[10] = ['h11', ' m18.359 21.375v-18.75h-1.469v18.75h1.469zm-12.718-.187 4.563-9.656-4-8.906h1.844l2.156 4.781c.396.917 .708 1.667.938 2.25.292-.729.604-1.427.938-2.094l2.344-4.938h1.688l-4.125 8.781 4.469 9.781h-1.938l-2.969-6.594c-.083-.229-.25-.646-.5-1.25l-.563 1.375-2.938 6.469h-1.906z'];
    svg.houseArr[11] = ['h12', ' m19.751 21.36v-18.719h-1.5v18.719h1.5zm-15.5-.156 4.562-9.688-4-8.875h1.844l2.156 4.781c.396.896 .708 1.646.938 2.25.292-.729.594-1.438.906-2.125l2.375-4.906h1.688l-4.125 8.75 4.469 9.813h-1.969l-2.938-6.625c-.104-.229-.271-.635-.5-1.219l-.563 1.344-2.938 6.5h-1.906zm12.937.156v-18.719h-1.5v18.719h1.5z'];
    svg.Symv = {};
    svg.Symv['0'] = [' m4.531 12.047c0-5.063 1.094-8.531 3.281-10.406 1.042-.875 2.448-1.333 4.219-1.375h.125c2.75 0 4.74 1.333 5.969 4 .896 1.979 1.344 4.573 1.344 7.781 0 2.729-.271 4.906-.813 6.531-.604 1.771-1.417 3.073-2.438 3.906-1.042.833-2.427 1.25-4.156 1.25-5.021 0-7.531-3.896-7.531-11.688zm2.906 0c0 2.625.188 4.583.563 5.875.688 2.313 2.031 3.5 4.031 3.563 3.042.042 4.563-3.094 4.563-9.406 0-6.292-1.542-9.448-4.625-9.469-1.917-.021-3.229 1.167-3.938 3.563-.396 1.375-.594 3.333-.594 5.875z'];
    svg.Symv['1'] = [' m16.375 23.891-2.938 0v-18.5c-.979.917-2.427 1.865-4.344 2.844-.542.292-1.021.51-1.437.656-.021-.625-.031-1.552-.031-2.781 3.417-1.667 5.698-3.667 6.844-6h1.906v23.781z'];
    svg.Symv['2'] = [' m19.766 21.032 0 2.75c-2.604 0-7.781.01-15.531.031 0-1.625.656-3.26 1.969-4.906.833-1.021 2.167-2.281 4-3.781 1.938-1.583 3.313-2.813 4.125-3.688 1.625-1.75 2.438-3.354 2.438-4.813 0-1.188-.438-2.156-1.313-2.906-.854-.771-1.885-1.156-3.094-1.156-1.438 0-2.552.427-3.344 1.281s-1.219 2.021-1.281 3.5c-.646-.083-1.635-.198-2.969-.344.292-3.25 1.833-5.365 4.625-6.344.896-.313 1.896-.469 3-.469 2.104 0 3.823.563 5.156 1.688 1.438 1.208 2.146 2.833 2.125 4.875-.021 1.958-.833 3.823-2.438 5.594-1.063 1.188-2.552 2.573-4.469 4.156l-2.125 1.75c-.708.604-1.521 1.531-2.438 2.781h11.563z'];
    svg.Symv['3'] = [' m4.469 17.266 2.813-.375c.604 3.021 2.104 4.531 4.5 4.531 1.313 0 2.427-.458 3.344-1.375.917-.938 1.375-2.063 1.375-3.375 0-1.292-.427-2.365-1.281-3.219-.854-.875-1.927-1.323-3.219-1.344-.542 0-1.198.125-1.969.375 .063-.563.167-1.396.313-2.5 3.417 0 5.125-1.26 5.125-3.781 0-1.083-.354-1.948-1.063-2.594-.708-.667-1.604-1-2.688-1-2.333 0-3.708 1.365-4.125 4.094l-2.844-.469c.708-3.917 3-5.917 6.875-6h.156c1.104 0 2.177.26 3.219.781 1.104.563 1.938 1.323 2.5 2.281.583 .938.885 1.917.906 2.938.042 2.125-1.031 3.667-3.219 4.625 2.896.708 4.344 2.604 4.344 5.688 0 2.104-.781 3.844-2.344 5.219-1.458 1.313-3.26 1.979-5.406 2h-.125c-1.958 0-3.594-.573-4.906-1.719-1.333-1.167-2.094-2.76-2.281-4.781z'];
    svg.Symv['4'] = [' m14.078 23.844v-5.656h-10.281v-2.688l10.813-15.344h2.406v15.344h3.188v2.688h-3.188v5.656h-2.938zm0-8.344v-10.688l-7.406 10.688h7.406z'];
    svg.Symv['5'] = [' m4.204 17.235 3.063-.25c.438 2.979 1.938 4.469 4.5 4.469 1.563 0 2.802-.583 3.719-1.75.854-1.083 1.281-2.417 1.281-4 0-1.604-.448-2.896-1.344-3.875-.875-.979-2.104-1.479-3.688-1.5-1.792-.042-3.229.719-4.313 2.281-.604-.063-1.51-.177-2.719-.344l2.281-12.094h11.719v2.781h-9.406l-1.25 6.313c1.375-.979 2.854-1.469 4.438-1.469 2.146-.021 3.906.698 5.281 2.156 1.354 1.479 2.031 3.302 2.031 5.469 0 2.104-.625 3.948-1.875 5.531-1.479 1.917-3.531 2.875-6.156 2.875-2.125 0-3.854-.563-5.188-1.688-1.438-1.208-2.229-2.844-2.375-4.906z'];
    svg.Symv['6'] = [' m19.235 5.954c-.479.021-1.427.083-2.844.187-.542-2.396-1.833-3.594-3.875-3.594-1.979 0-3.479 1.198-4.5 3.594-.542 1.208-.813 2.99-.813 5.344 1.354-2.042 3.219-3.063 5.594-3.063 2.042 0 3.708.75 5 2.25 1.208 1.396 1.813 3.135 1.813 5.219 0 3.25-1.146 5.552-3.438 6.906-1.167.667-2.427 1-3.781 1-5.333 0-8-3.729-8-11.188 0-8.292 2.76-12.427 8.281-12.406 1.792 0 3.271.51 4.437 1.531s1.875 2.427 2.125 4.219zm-11.593 9.938c0 .958.198 1.875.594 2.75.438 .938 1.021 1.646 1.75 2.125.875 .563 1.833.781 2.875.656 1.25-.146 2.219-.76 2.906-1.844.625-.958.938-2.104.938-3.438 0-1.479-.365-2.698-1.094-3.656-.792-1.021-1.917-1.552-3.375-1.594-1.375-.042-2.479.427-3.313 1.406-.854 1-1.281 2.198-1.281 3.594z'];
    svg.Symv['7'] = [' m4.36 3.171v-2.812h15.281v2.281c-1.708 1.792-3.281 4.062-4.719 6.812-1.375 2.604-2.417 5.177-3.125 7.719-.604 2.125-.99 4.281-1.156 6.469h-2.969c.042-4.438 1.396-9.208 4.062-14.313 1.188-2.25 2.573-4.302 4.156-6.156h-11.531z'];
    svg.Symv['8'] = [' m8.797 10.937-.031 0c-2.313-.875-3.469-2.458-3.469-4.75 0-1.833.656-3.302 1.969-4.406 1.229-1.021 2.781-1.552 4.656-1.594h.125c1.813 0 3.344.531 4.594 1.594 1.354 1.146 2.031 2.625 2.031 4.438 0 2.208-1.135 3.781-3.406 4.719 2.896.958 4.344 2.917 4.344 5.875 0 2.146-.729 3.844-2.188 5.094-1.458 1.271-3.271 1.906-5.438 1.906-2.229 0-4.031-.615-5.406-1.844-1.458-1.292-2.188-3.021-2.188-5.187 0-3.167 1.469-5.115 4.406-5.844zm-.625-4.844v.031c0 1.104.365 1.99 1.094 2.656.729 .688 1.646 1.031 2.75 1.031 1 0 1.865-.344 2.594-1.031.75-.667 1.125-1.5 1.125-2.5 0-1.063-.365-1.948-1.094-2.656-.729-.688-1.615-1.031-2.656-1.031-1.063 0-1.969.323-2.719.969-.729.646-1.094 1.49-1.094 2.531zm-.906 10.719c0 1.917.76 3.271 2.281 4.063.813 .438 1.625.656 2.438.656 1.354 0 2.479-.427 3.375-1.281.875-.854 1.313-1.969 1.313-3.344 0-1.396-.448-2.531-1.344-3.406s-2.042-1.313-3.438-1.313c-1.333 0-2.438.438-3.313 1.313-.875.854-1.313 1.958-1.313 3.312z'];
    svg.Symv['9'] = [' m4.795 18.095c.438-.042 1.344-.115 2.719-.219.438 2.438 1.688 3.656 3.75 3.656 1.75 0 3.104-.729 4.063-2.188.979-1.438 1.469-3.51 1.469-6.219v-.563c-.563.917-1.365 1.656-2.406 2.219s-2.104.844-3.188.844c-2.104 0-3.781-.76-5.031-2.281-1.188-1.438-1.781-3.229-1.781-5.375 0-2.271.656-4.135 1.969-5.594s3.094-2.198 5.344-2.219h.156c1.458 0 2.792.417 4 1.25 1.25.875 2.177 2.021 2.781 3.438.646 1.521.969 3.708.969 6.563 0 7.063-1.958 11.115-5.875 12.156-.729.188-1.542.281-2.438.281-3.792 0-5.958-1.917-6.5-5.75zm11.656-10.219.031 .031c0-1.479-.375-2.719-1.125-3.719-.813-1.104-1.927-1.656-3.344-1.656-1.479 0-2.656.583-3.531 1.75-.792 1.042-1.188 2.323-1.188 3.844 0 1.396.427 2.573 1.281 3.531.854 .979 1.969 1.469 3.344 1.469 1.438 0 2.563-.531 3.375-1.594.771-1 1.156-2.219 1.156-3.656z'];
    svg.Symv['+'] = [' m10.906 18.125v-5.063h-5.031v-2.156h5.031v-5.031h2.156v5.031h5.063v2.156h-5.063v5.063h-2.156z'];
    svg.Symv['-'] = [' m8.625 13.11v-2.219h6.75v2.219h-6.75z'];
    svg.Symv['('] = [' m13.485 24.579c-3.104-3.979-4.656-8.177-4.656-12.594 0-4.229 1.552-8.417 4.656-12.563h1.656c-.417.729-1.104 2.031-2.063 3.906-1.208 2.604-1.813 5.479-1.813 8.625 0 4.25 1.302 8.458 3.906 12.625h-1.688z'];
    svg.Symv[')'] = [' m10.516 24.734-1.719 0c2.667-4.25 4-8.49 4-12.719 0-2.958-.635-5.885-1.906-8.781-.375-.875-1.073-2.198-2.094-3.969.375 .021.948 .031 1.719.031 3.125 4.125 4.688 8.354 4.688 12.688 0 4.479-1.563 8.729-4.688 12.75z'];
    svg.Symv[','] = [' m10.875 19.156v-2.906h2.875v2.906c0 1.979-.792 3.333-2.375 4.062l-.656-1.094c1.021-.438 1.552-1.427 1.594-2.969h-1.438z'];
    svg.Symv['.'] = [' m10.578 23.422v-2.875h2.844v2.875h-2.844z'];
    svg.Symv['*'] = [' m7.969 7.015c.083-.313.271-.917.562-1.812.708 .229 1.698.646 2.969 1.25-.146-1.542-.24-2.615-.281-3.219h1.875c-.042.854-.135 1.906-.281 3.156.813-.396 1.813-.802 3-1.219.125 .417.323 1.031.594 1.844-1.083.354-2.156.583-3.219.687 .438.396 1.177 1.208 2.219 2.438l-1.531 1.063c-.458-.604-1.052-1.5-1.781-2.688-.563 1.104-1.115 2-1.656 2.688l-1.469-1.063c.458-.563 1.177-1.375 2.156-2.438-1.125-.208-2.177-.438-3.156-.688z'];
    svg.Symv[':'] = [' m10.703 7.891v-2.656h2.594v2.656h-2.594zm0 10.875v-2.625h2.594v2.625h-2.594z'];
    svg.Symv[';'] = [' m10.734 5.891v-2.719h2.688v2.719h-2.688zm0 11.156v-2.687h2.688v2.688c0 1.854-.74 3.115-2.219 3.781-.125-.229-.333-.563-.625-1 .958-.396 1.458-1.323 1.5-2.781h-1.344z'];
    svg.Symv['<'] = [' m5.203 13.141v-2.375l13.594-5.719v2.5l-10.781 4.406 10.781 4.469v2.531z'];
    svg.Symv['>'] = [' m18.797 13.125-13.594 5.844v-2.531l10.75-4.469-10.75-4.438v-2.5l13.594 5.75v2.344z'];
    svg.Symv['='] = [' m17.75 10.344h-11.5v-1.969h11.5v1.969zm0 5.281h-11.5v-1.969h11.5v1.969z'];
    svg.Symv['R'] = [' m3.312 21.875 0-19.75h8.75c1.521 0 2.708.125 3.563.375 1.188.354 2.094 1.063 2.719 2.125.5 .854.75 1.813.75 2.875.021 3.083-1.823 4.875-5.531 5.375 1.396.688 2.635 1.885 3.719 3.594l3.406 5.406h-3.25l-2.594-4.094c-.625-1.021-1.104-1.75-1.438-2.188-.667-.917-1.26-1.531-1.781-1.844-.292-.188-.698-.365-1.219-.531-.729-.083-1.208-.125-1.437-.125h-3.063v8.781h-2.594zm2.593-11.031c.958 0 2.854-.01 5.688-.031 1.104 0 1.896-.063 2.375-.188.729-.188 1.323-.563 1.781-1.125.438-.563.656-1.229.656-2 0-2.125-1.406-3.188-4.219-3.188h-6.281v6.531z'];
    svg.Symv['S'] = [' m4.423 15.377c.396-.021 1.187-.083 2.375-.187.25 1.958 1.198 3.25 2.844 3.875.875 .333 1.802.5 2.781.5 2 0 3.385-.531 4.156-1.594.354-.5.531-1.031.531-1.594 0-.979-.406-1.729-1.219-2.25-.521-.375-1.354-.698-2.5-.969-.417-.104-1.042-.25-1.875-.438-1.729-.396-2.948-.792-3.656-1.188-1.833-1-2.75-2.375-2.75-4.125 0-1.042.323-1.979.969-2.813.646-.854 1.469-1.469 2.469-1.844.979-.396 2.073-.594 3.281-.594 3 0 5.083.885 6.25 2.656.542 .854.844 1.865.906 3.031l-2.406.188c-.229-2.458-1.771-3.688-4.625-3.688-1.125 0-2.073.198-2.844.594-1.021.521-1.531 1.281-1.531 2.281 0 .667.24 1.229.719 1.688.25 .25 1.552.708 3.906 1.375l2.531.719c.833.229 1.365.396 1.594.5 2.146 1 3.229 2.542 3.25 4.625.021 2.25-1.104 3.906-3.375 4.969-1.063.5-2.292.75-3.688.75-3.396 0-5.75-1-7.063-3-.646-.979-.99-2.135-1.031-3.469z'];
    svg.Symv['D'] = [' m3.844 21.843v-19.687h6.781c1.458 0 2.625.104 3.5.313 2.563.604 4.302 2.188 5.219 4.75.521 1.438.792 3 .813 4.688v.156c0 1.688-.271 3.229-.813 4.625-.646 1.729-1.604 3.021-2.875 3.875s-3.115 1.281-5.531 1.281h-7.094zm2.594-2.281h4.219c2.271 0 3.865-.469 4.781-1.406 1.333-1.375 2-3.469 2-6.281 0-3.771-1.156-6.094-3.469-6.969-.688-.271-1.813-.406-3.375-.406h-4.156v15.063z'];
    svg.Symv['T'] = [' m10.688 21.844v-17.344h-6.5v-2.344h15.625v2.344h-6.5v17.344h-2.625z'];
    svg.Symv['degree'] = [' m11.953 11.516-.031.031c.792 0 1.458-.281 2-.844.563-.542.844-1.208.844-2v-.094c0-.708-.271-1.333-.813-1.875-.542-.563-1.208-.844-2-.844-.771 0-1.438.271-2 .813-.542.563-.813 1.229-.813 2s.271 1.438.813 2c.563.542 1.229.813 2 .813zm-1.844-2.782c0-.521.177-.958.531-1.313s.781-.531 1.281-.531c.521 0 .958.177 1.313.531s.531.792 .531 1.313-.177.958-.531 1.313-.792.531-1.313.531c-.5 0-.927-.177-1.281-.531s-.531-.792-.531-1.313z'];
    svg.Symv['min'] = [' m13.86 9.703h-1.344l-2.188-3.938h2.281z'];
    svg.Symv['sec'] = [' m12.016 9.797h-.813c-.208-.667-.646-1.979-1.313-3.938h1.375zm1.906 0h-.813c-.208-.667-.646-1.979-1.313-3.938h1.375z'];
    svg.Symv['fire'] = [' m1.328 22.25 10.781-20.5 10.563 20.5h-21.344zm10.75-16.157-7.594 14.219h15.094z'];
    svg.Symv['earth'] = [' m1.328 1.75 10.781 20.5 10.563-20.5h-21.344zm10.75 16.157-7.594-14.219h15.094z'];
    svg.Symv['air'] = [' m1.328 22.25 10.813-20.5 10.531 20.5h-21.344zm10.781-16.157-7.625 14.219h15.094zm-10.781 3.969v1.938h21.125v-1.938h-21.125zm6.406 0c-.208.333-.635.979-1.281 1.938h2.562c.167-.313.49-.958.969-1.938h-2.25zm6.407 0 .969 1.938h2.562c-.229-.313-.656-.958-1.281-1.938h-2.25z'];
    svg.Symv['water'] = [' m1.328 1.75 10.813 20.5 10.531-20.5h-21.344zm10.781 16.157-7.625-14.219h15.094zm-10.781-3.969v-1.938h21.125v1.938h-21.125zm6.406 0c-.208-.333-.635-.979-1.281-1.938h2.562c.167.313 .49.958 .969 1.938h-2.25zm6.407 0 .969-1.938h2.562c-.229.313-.656.958-1.281 1.938h-2.25z'];
    svg.Symv['Sun'] = svg.plArr[0][1];
    svg.Symv['Moon'] = svg.plArr[1][1];
    svg.Symv['Mercury'] = svg.plArr[2][1];
    svg.Symv['Venus'] = svg.plArr[3][1];
    svg.Symv['Mars'] = svg.plArr[4][1];
    svg.Symv['Jupiter'] = svg.plArr[5][1];
    svg.Symv['Saturn'] = svg.plArr[6][1];
    svg.Symv['Uranus'] = svg.plArr[7][1];
    svg.Symv['Neptune'] = svg.plArr[8][1];
    svg.Symv['Pluto'] = svg.plArr[9][1];
    svg.Symv['NNode'] = svg.plArr[11][1];
    svg.Symv['Lilith'] = svg.plArr[12][1];
    svg.Symv['aries'] = svg.signArr[0][1];
    svg.Symv['taurus'] = svg.signArr[1][1];
    svg.Symv['gemini'] = svg.signArr[2][1];
    svg.Symv['cancer'] = svg.signArr[3][1];
    svg.Symv['leo'] = svg.signArr[4][1];
    svg.Symv['virgo'] = svg.signArr[5][1];
    svg.Symv['libre'] = svg.signArr[6][1];
    svg.Symv['scorpio'] = svg.signArr[7][1];
    svg.Symv['sagittarius'] = svg.signArr[8][1];
    svg.Symv['capricorn'] = svg.signArr[9][1];
    svg.Symv['aquarius'] = svg.signArr[10][1];
    svg.Symv['pisces'] = svg.signArr[11][1];
    svg.Symv['h1'] = svg.houseArr[0][1];
    svg.Symv['h2'] = svg.houseArr[1][1];
    svg.Symv['h3'] = svg.houseArr[2][1];
    svg.Symv['h4'] = svg.houseArr[3][1];
    svg.Symv['h5'] = svg.houseArr[4][1];
    svg.Symv['h6'] = svg.houseArr[5][1];
    svg.Symv['h7'] = svg.houseArr[6][1];
    svg.Symv['h8'] = svg.houseArr[7][1];
    svg.Symv['h9'] = svg.houseArr[8][1];
    svg.Symv['h10'] = svg.houseArr[9][1];
    svg.Symv['h11'] = svg.houseArr[10][1];
    svg.Symv['h12'] = svg.houseArr[11][1];

    svg.aspObj = {};
    svg.aspObj['0d'] = ' m14.86 10.594 0-.031c1 1.417 1.5 2.896 1.5 4.437 0 2.063-.708 3.802-2.125 5.219-1.438 1.438-3.177 2.156-5.219 2.156s-3.781-.719-5.219-2.156c-1.438-1.417-2.156-3.156-2.156-5.219 0-2.042.708-3.771 2.125-5.187 1.438-1.438 3.177-2.156 5.219-2.156 1.542 0 3.021.49 4.437 1.469l7.5-7.5 1.438 1.5zm-2.094.656v-.031c-1.042-1.042-2.292-1.563-3.75-1.563-1.479 0-2.729.521-3.75 1.563-1.042 1.042-1.563 2.292-1.563 3.75 0 1.479.51 2.729 1.531 3.75s2.271 1.531 3.75 1.531c1.458 0 2.708-.51 3.75-1.531s1.563-2.271 1.563-3.75c0-1.458-.51-2.698-1.531-3.719z';
    svg.aspObj['60d'] = ' m14.203 13.047 4.688 8.406-1.813.906-5.063-9.125-5.094 9.125-1.813-.906 4.688-8.406h-8.656v-2.094h8.625l-5.156-8.406c.313-.146.927-.448 1.844-.906l5.563 9.313 5.531-9.313c.313.167 .927.469 1.844.906l-5.156 8.406h8.625v2.094h-8.656z';
    svg.aspObj['90d'] = ' m1.766 22.219v-20.438h20.469v20.438h-20.469zm18.469-18.468h-16.469v16.5h16.469v-16.5z';
    svg.aspObj['120d'] = ' m1.328 22.25 10.781-20.5 10.563 20.5h-21.344zm10.75-16.125-7.594 14.188h15.094z';
    svg.aspObj['180d'] = ' m21.515 10.766c-.813.792-1.531 1.302-2.156 1.531-.396.125-1.073.208-2.031.25-1.125.021-2.26-.354-3.406-1.125l-2.531 2.5c.75 1.125 1.125 2.26 1.125 3.406 0 1.646-.573 3.042-1.719 4.188s-2.542 1.719-4.188 1.719c-1.625 0-3.01-.573-4.156-1.719-1.125-1.146-1.688-2.542-1.688-4.188s.573-3.042 1.719-4.188c1.146-1.125 2.521-1.688 4.125-1.688 1.167 0 2.313.375 3.438 1.125l2.531-2.5c-.75-1.146-1.125-2.313-1.125-3.5 0-1.646.573-3.031 1.719-4.156 1.146-1.104 2.531-1.656 4.156-1.656 1.646 0 3.042.563 4.188 1.688 1.146 1.146 1.719 2.542 1.719 4.188 0 1.625-.573 3-1.719 4.125zm-4.187-8.094c-1.104 0-2.031.385-2.781 1.156s-1.125 1.708-1.125 2.813.375 2.042 1.125 2.813c.771.75 1.708 1.125 2.813 1.125s2.042-.385 2.813-1.156c.75-.792 1.125-1.729 1.125-2.813s-.385-2.01-1.156-2.781-1.708-1.156-2.813-1.156zm-10.75 10.719c-1.104 0-2.031.385-2.781 1.156-.771.771-1.146 1.708-1.125 2.813s.406 2.031 1.156 2.781 1.677 1.125 2.781 1.125 2.042-.385 2.813-1.156 1.156-1.698 1.156-2.781-.385-2.01-1.156-2.781c-.792-.771-1.74-1.156-2.844-1.156z';
    svg.aspObj['30d'] = ' m13.718 17.657h6.844v2h-17.125v-2h6.844l-6.844-12.344 1.75-.969 6.813 12.219 6.813-12.219 1.75.969z';
    svg.aspObj['36d'] = ' m12.797 2.406 0 16.969 7.375.125v2.094h-16.344c.021-.354.042-1.052.063-2.094h6.781c-.021-2.854-.052-8.552-.094-17.094h2.219z';
    svg.aspObj['40d'] = ' m3.906 22.266v-20.531h2.813l10.75 16.125v-16.125h2.625v20.531h-2.781l-10.813-16.125v16.125h-2.594z';
    svg.aspObj['45d'] = ' m3.281 21.219 10.344-18.438 1.813 1.031-8.594 15.344h13.875v2.063h-17.438z';
    svg.aspObj['72d'] = ' m19.141 21.578c-.479-.417-1.458-1.219-2.938-2.406-1.479 1.125-3.01 1.688-4.594 1.688-2 0-3.75-.75-5.25-2.25-1.833-1.792-2.75-4.115-2.75-6.969 0-1.792.438-3.469 1.313-5.031s2.083-2.729 3.625-3.5c.917-.458 1.938-.688 3.063-.688 1.979 0 3.719.75 5.219 2.25 1.833 1.833 2.76 4.156 2.781 6.969.021 2.188-.656 4.219-2.031 6.094l2.813 2.313zm-3.719-15.5 0 .031c-1.146-1.146-2.417-1.719-3.813-1.719-1.458 0-2.75.573-3.875 1.719-1.458 1.5-2.188 3.354-2.188 5.563 0 2.229.729 4.063 2.188 5.5 1.125 1.146 2.417 1.719 3.875 1.719.938 0 1.958-.333 3.063-1l-2.469-2 1.219-1.531 2.656 2.125c1.021-1.5 1.531-3.125 1.531-4.875 0-2.229-.729-4.073-2.188-5.531z';
    svg.aspObj['144d'] = ' m17.407 14.797c0 1.396-.521 2.562-1.563 3.5-.938.813-2.052 1.219-3.344 1.219h-.844l.5 2.563h-1.125l-.5-2.563h-3.938v-17.594h5.219c1.313 0 2.438.375 3.375 1.125 1.104.833 1.656 1.948 1.656 3.344 0 2.042-1.208 3.354-3.625 3.938 1.146.125 2.104.563 2.875 1.313.875 .813 1.313 1.865 1.313 3.156zm-3.343-8.406c0-2.25-.917-3.375-2.75-3.375h-2.188v6.844h2.469c.729 0 1.323-.333 1.781-1 .458-.646.688-1.469.688-2.469zm.562 8.406c0-1.25-.323-2.229-.969-2.938s-1.5-1.063-2.563-1.063h-1.969v7.719h1.188c-.021-.25-.094-.74-.219-1.469h1.188c.021.229 .094.708 .219 1.437.896-.104 1.635-.49 2.219-1.156.604-.667.906-1.51.906-2.531z';
    svg.aspObj['135d'] = ' m12.985 16.922v3.969h4.969v2h-6.938v-5.969h-6.938v-15.813h15.844v15.813h-6.938zm4.938-13.844h-11.875v11.875h4.969v-5.938h1.969v5.938h4.938v-11.875z';
    svg.aspObj['150d'] = ' m20.562 18.657-1.75 1-6.781-12.219-6.813 12.219c-.313-.167-.906-.5-1.781-1l6.844-12.313h-6.844v-2h17.125v2h-6.844z';

    //## Text #####################
    a2d.textAsp = (d) => {
        let arrAsp = a2d.aspectRadix(d);
        let arrOut = [];
        arrAsp.forEach((el, i) => {
            el[4] = a2d.planetSwe[el[0]];
            el[5] = a2d.planetSwe[el[1]];
        });
        arrAsp.sort(function (a, b) {
            return a[4] - b[4] || a[5] - b[5];
        });
        arrAsp.forEach((el, i) => {
            arrOut.push([el[0], el[2], el[1], el[3].toFixed(2)]);
        });
        let concA = [['Aspects']].concat(arrOut);

        return(concA);
    };

    a2d.getStatistic = (d) => {
        let arr = [];
        let ts = a2d.OBJStatistic;
        for (let key in ts) {
            arr[fjs.FirstUpperCase(key)] = [];
            for (let k in ts[key]) {
                arr[fjs.FirstUpperCase(key)][fjs.FirstUpperCase(k)] = [];
            }
        }
        let arrPL = fAr.objToArray(d['planets']);
        arrPL.forEach((el, i) => {
            if (i > 9)
                return;
            let v0 = a2d.degreeToNumZod(el[1])[1];
            for (let key in ts) {
                for (let k in ts[key]) {
                    if (ts[key][k].find((v1) => {
                        return v0 === v1;
                    }))
                        arr[fjs.FirstUpperCase(key)][fjs.FirstUpperCase(k)].push(el[0]);
                }
            }
        });
        return [arr];
    };
    a2d.textStatistic = (d) => {
        let arrOut = [];
        let arrIn = a2d.getStatistic(d)[0];
        for (let key in arrIn) {
            arrOut.push([key]);
            for (let k in arrIn[key]) {
                arrOut.push([k, arrIn[key][k].length, arrIn[key][k].join(', ')]);
            }
        }
        ;
        return arrOut;
    }
    a2d.textPlH = (d) => {
        let hPl = [['Planets']];
        let arrPl = fAr.objToArray(d['planets']);
        arrPl.forEach((el, index) => {
            el[1] = (a2d.degreeToNameZod(el[1]));
            el[2] = (el[2] < 0 ? 'R' : '');
        });
        let hH = [['Houses']];
        let arrHouse = fAr.arrPlusIndex(fAr.arrOneToTwo(d['cusps']));
        arrHouse.forEach((el, index) => el[0] = a2d.HouseName[index]);
        arrHouse.forEach((el, index) => el[1] = (a2d.degreeToNameZod(el[1])));
        let concP = hPl.concat(arrPl);
        let concH = hH.concat(arrHouse);
        return [concP, concH];
    };
    a2d.PlStatistic = (d) => {
        let obj = {};
        let i = 0;
        for (let key in d['planets']) {
            obj[key] = [[], []];
            i = i + 1;
        }
        ;
        a2d.aspectRadix(d).forEach((el, index) => {
            obj[el[0]][1].push(el[2]);
            obj[el[1]][1].push(el[2]);
        });

        for (let key in d['planets']) {
            if (obj[key][1].length === 0) {
                obj[key][0] = 'unaspected'
            } else {
                stress = 0;
                obj[key][1].forEach((el, index) => {
                    let res = a2d.aspStressful.find((val) => {
                        return val === el;
                    });
                    if (res !== undefined)
                        stress++;
                });
                if (stress === obj[key][1].length) {
                    obj[key][0] = 'stress';
                } else if (stress === 0) {
                    obj[key][0] = 'harmonic';
                } else
                    obj[key][0] = 'mixed';
            }
            ;
        }
        ;
        return obj;
    }
    // ## Util function #######################
    a2d.degreeToNumZod = (degree) => {
        let zodNum = Math.trunc(degree / 30);
        let degreeInSign = degree - zodNum * 30;
        return [degreeInSign, zodNum];
    };
    a2d.getDegMinToNumZod = (degree) => {
        let zodNum = Math.trunc(degree / 30);
        let degreeInSign = degree - zodNum * 30;
        let minInSign = Math.round((degree - Math.trunc(degree)) * 60);
        return [zeroPadded(Math.trunc(degreeInSign)), zeroPadded(minInSign), zodNum];
    };
    a2d.degreeToNameZod = (degree) => {
        let zodNum = Math.trunc(degree / 30);
        let degreeInSign = Math.trunc(degree - zodNum * 30);
        return (strtime(degree - zodNum * 30) + ' ' + (svg.signArr[zodNum][0]));
    };
    a2d.sunSignAsc = (sunDegree = 0) => {
        let h = [];
        let zodNum = Math.trunc(sunDegree / 30);
        for (let i = 0; i < 12; i++) {
            h.push((zodNum + i) * 30);
            if (!(h[i] < 360)) {
                h[i] = h[i] - 360;
            }
        }
        return h;
    };
    a2d.aspectRadix = (data) => {
        let Arr = [];
        let aspArr = [];
        let arrPl = fAr.objToArray(data.planets);
        arrPl.forEach((el, j) => {
            for (let i = j + 1; i < arrPl.length; i++) {
                let degree = (el[1] > arrPl[i][1]) ? (el[1] - arrPl[i][1]) : (arrPl[i][1] - el[1]);
                degree = ((degree - 15) > 180) ? (degree - 180) : (degree);
                Arr.push([el[0], arrPl[i][0], degree]);
            }
        });
        Arr.sort((a, b) => {
            return (a[2] - b[2]);
        });
        Arr.forEach((el, j) => {
            for (let i = 0; i < a2d.aspMajor.length; i++) {
                if (el[2] >= a2d.aspMajor[i] - a2d.aspOrb[el[0]][a2d.aspMajor[i]]) {
                    if (el[2] <= a2d.aspMajor[i] + a2d.aspOrb[el[0]][a2d.aspMajor[i]])
                    {
                        aspArr.push([el[0], el[1], a2d.aspMajor[i], Math.abs(el[2] - a2d.aspMajor[i])]);
                        i = a2d.aspMajor.length;
                        continue;
                    }
                }
            }
        });
        return aspArr;
    };
    a2d.aspectTransit = (data) => {
        let Arr = [];
        let aspArr = [];
        let arrPlN = fAr.objToArray(data[0].planets);
        let arrPlT = fAr.objToArray(data[1].planets);
        arrPlN.forEach((el, j) => {
            arrPlT.forEach((elT, i) => {
                let degree = (el[1] > elT[1]) ? (el[1] - elT[1]) : (elT[1] - el[1]);
                degree = ((degree - 15) > 180) ? (degree - 180) : (degree);
                Arr.push([el[0], elT[0], degree]);
            });
        });
        Arr.sort((a, b) => {
            return (a[2] - b[2]);
        });
        Arr.forEach((el, j) => {
            for (let i = 0; i < a2d.aspMajor.length; i++) {
                if (el[2] >= a2d.aspMajor[i] - a2d.aspOrbT[el[0]][a2d.aspMajor[i]]) {
                    if (el[2] <= a2d.aspMajor[i] + a2d.aspOrbT[el[0]][a2d.aspMajor[i]])
                    {
                        aspArr.push([el[0], el[1], a2d.aspMajor[i], Math.abs(el[2] - a2d.aspMajor[i])]);
                        i = a2d.aspMajor.length;
                        continue;
                    }
                }
            }

        });
        return aspArr;
    };

    // ## Date #####################
    a2d.getLanLong = (latitude = 52.7807, longitude = 52.2635) => {
        let ll = [];
        let Hour = Math.abs(Math.trunc(latitude));
        let Min = Math.round((Math.abs(latitude) - Hour) * 60);
        ll[0] = ' ' + Hour.toString() + ((latitude > 0) ? 'N' : 'S') + Min.toString();
        Hour = Math.abs(Math.trunc(longitude));
        Min = Math.round((Math.abs(longitude) - Hour) * 60);
        ll[1] = ' ' + Hour.toString() + ((longitude > 0) ? 'E' : 'W') + Min.toString();
        return ll;
    };
    a2d.getDSToDate = (s) => {
        //'1971-11-19T19:43-03:00'
        let formatter = new Intl.DateTimeFormat("ru", {
            weekday: "short",
            year: "numeric",
            month: "numeric",
            day: "numeric",
            hour: "numeric",
            minute: "numeric",
            second: "numeric"
        });
        let gmt = s.split('T')[1];
        if (gmt.indexOf('+') > -1)
            gmt = gmt.substring(gmt.indexOf('+'));
        else if (gmt.indexOf('-') > -1)
            gmt = gmt.substring(gmt.indexOf('-'));
        else if (gmt.indexOf('Z') > -1)
            gmt = '00:00';
        let min = gmt.split(':');
        min = parseInt(min[0]) * 60 + parseInt(min[1]);
        let d = new Date(s);
        d.setMinutes(d.getMinutes() + min);
        return (formatter.format(d) + ', GMT' + gmt).split(',');
    }
    a2d.Date = (dat = new Date(), gmt = (dat).getTimezoneOffset()) => {
        let date = {};
        zeroPadded = (val) => {
            return (val >= 10) ? val : ('0' + val);
        };
        strtime = (value) => {
            var hour = Math.trunc(value);
            var minFrac = (value - hour) * 60;
            var min = Math.trunc(minFrac);
            var sec = Math.trunc((minFrac - min) * 60);
            return (zeroPadded(hour) + '*' + zeroPadded(min) + "'" + zeroPadded(sec) + '"');
        };
        signGMT = (GMT) => {
            let sign = '-';
            if (GMT < 0)
                sign = '+';
            return sign;
        };
        getHourMinGMT = (GMT) => {
            let Hour = Math.abs(Math.trunc(GMT / 60));
            let Min = Math.abs(GMT) - Hour * 60;
            let strTime = "Z";
            if ((Hour !== 0) || (Min !== 0))
                strTime = signGMT(GMT) + zeroPadded(Hour) + ':' + zeroPadded(Min);
            return strTime;
        };
        newDate = (d) => {
            let strDate = d.getFullYear() + "-" + zeroPadded(d.getMonth() + 1) + "-" + zeroPadded(d.getDate()) + 'T' + zeroPadded(d.getHours()) + ":" + zeroPadded(d.getMinutes());
            return strDate;
        };
        newUTCDate = (d) => {
            let strDate = d.getUTCFullYear() + "-" + zeroPadded(d.getUTCMonth() + 1) + "-" + zeroPadded(d.getUTCDate()) + 'T' + zeroPadded(d.getUTCHours()) + ":" + zeroPadded(d.getUTCMinutes());
            return strDate;
        };
        getUTCDateGMT = (d, gmt) => {
            let dat1 = new Date(d);
            return newUTCDate(dat1) + getHourMinGMT(gmt);
        };
        date['datepicker'] = newDate(dat);
        date['newUTCDate'] = newUTCDate(dat);
        date['swisseph'] = getUTCDateGMT(dat, gmt);
        return date;
    };
// ## SVG #####################
    svg.getSimv = (x, y, elArrSim, rEl, parentEl, scaleEl = 1, fill = '#000') => {
        let posX = x - scaleEl * rEl;
        let posY = y - scaleEl * rEl;
        let sign = fEl.crElSVG("path", parentEl, {id: "simvL", d: elArrSim, "stroke": fill, "stroke-width": 1, fill: fill, transform: 'translate(' + posX + ',' + posY + '),scale(' + scaleEl + ')'});
        return sign;
    };
    svg.getSimvPlHInfo = (parentEl, x, y, elArrSim, elD, elR, rEl, scaleEl = 1, fill = '#000') => {
        breakNumerToDigit = (a) => {
            let b = String(a).split("");
            return (a < 10) ? b[0] : [b[0], b[1]];
        }
        let posX = x - scaleEl * rEl;
        let posY = y - scaleEl * rEl;
        let gSign = fEl.crElSVG("g", parentEl, {id: 'g'});
        let sign = fEl.crElSVG("path", gSign, {id: "simvL", d: elArrSim[1], "stroke": fill, "stroke-width": 1, fill: fill, transform: 'translate(' + posX + ',' + posY + '),scale(' + scaleEl + ')'});
        let scale = scaleEl * 0.5;
        let posN0X = posX + 1.2 * rEl * scaleEl;
        let posN0Y = posY - scale * rEl;
        let posN1X = posN0X + scale * 1.2 * rEl;
        let posN1Y = posN0Y;
        if (elD > 9) {
            sign = fEl.crElSVG("path", gSign, {id: "simvL", d: svg.Symv[breakNumerToDigit(elD)[0]][0], "stroke": "0080C0", "stroke-width": 2, fill: fill, transform: 'translate(' + String(posN0X) + ',' + String(posN0Y) + '),scale(' + scale + ')'});
            sign = fEl.crElSVG("path", gSign, {id: "simvL", d: svg.Symv[breakNumerToDigit(elD)[1]][0], "stroke": "0080C0", "stroke-width": 2, fill: fill, transform: 'translate(' + String(posN1X) + ',' + String(posN1Y) + '),scale(' + scale + ')'});
        } else {
            sign = fEl.crElSVG("path", gSign, {id: "simvL", d: svg.Symv[breakNumerToDigit(elD)[0]][0], "stroke": "0080C0", "stroke-width": 2, fill: fill, transform: 'translate(' + String(posN1X) + ',' + String(posN1Y) + '),scale(' + scale + ')'});
        }
        ;
        if (elR != '') {
            let posRX = posN1X;
            let posRY = posY + 2 * scale * rEl;
            let retro = fEl.crElSVG("path", gSign, {id: "simvL", d: svg.Symv['R'][0], "stroke": "0080C0", "stroke-width": 3, fill: fill, transform: 'translate(' + String(posRX) + ',' + String(posRY) + '),scale(' + scale + ')'});
        }
        ;
        return gSign;
    };
    svg.drawZodiac = (parentEl, cx = svg.cx, cy = svg.cy, rIn = svg.rInZ, rOut = svg.rOutZ, rEl = svg.rEl, rotate = svg.rotate) => {
        function polarToCartesian(centerX, centerY, radius, angleInDegrees) {
            return {
                x: centerX - (radius * Math.cos(angleInDegrees.toRad())),
                y: centerY + (radius * Math.sin(angleInDegrees.toRad()))
            };
        }
        describeArc = (x, y, radius, startAngle, endAngle) => {
            var start = polarToCartesian(x, y, radius, startAngle);
            var end = polarToCartesian(x, y, radius, endAngle);
            var largeArcFlag = "0";
            var d = [
                "M", start.x, start.y,
                "A", radius, radius, 0, 0, 0, end.x, end.y
            ].join(" ");
            return d;
        }
        let rSector = rOut - ((rOut - rIn) / 2);
        let g = fEl.crElSVG('g', parentEl, {id: 'sector'});
        for (let i = 0; i < 12; i++) {
            //sector Zodiaca
            let sector = fEl.crElSVG('path', g, {fill: "none", stroke: svg.colorZodiac[i], 'stroke-width': (rOut - rIn), d: describeArc(cx, cy, rSector, i * 30 - rotate, (i + 1) * 30 - rotate)});
            //sign Zodiaca
            let posX = cx - rSector * Math.cos((i * 30 + 15 - rotate).toRad());
            let posY = cy + rSector * Math.sin((i * 30 + 15 - rotate).toRad());
            svg.getSimv(posX, posY, svg.signArr[i][1], rEl, fEl.getElId('sector'), svg.scaleEl * 0.8, "#0080C0");
        }
        ;
        let circleIn = fEl.crElSVG('circle', g, {cx: cx, cy: cy, r: rIn, stroke: "#0080C0", 'stroke-width': 1, fill: "transparent"});
        let circleOut = fEl.crElSVG('circle', g, {cx: cx, cy: cy, r: rOut, stroke: "#0080C0", 'stroke-width': 1, fill: "transparent"});
    };
    svg.colorZodiac = ['#FABDBA', '#FDDCBD', '#FDFDBD', '#DDFDBC', '#FABDBA', '#FDDCBD', '#FDFDBD', '#DDFDBC', '#FABDBA', '#FDDCBD', '#FDFDBD', '#DDFDBC'];
    svg.getNumPosPL = (data, rEl, rOut = rOutR, ) => {
        let arrNumPlToSign = [];
        for (let i = 0; i < 12; i++)
// Numer planets by signs        
            arrNumPlToSign[i] = 0;
        fAr.objToArray(data.planets).forEach((el, index) => {
            el[2] = a2d.degreeToNumZod(el[1]);
            arrNumPlToSign[el[2][1]] = arrNumPlToSign[el[2][1]] + 1;
        });
        let maxNumPlToSign = 0;
        arrNumPlToSign.forEach((el, index) => {
            maxNumPlToSign = (el > maxNumPlToSign) ? el : maxNumPlToSign;
        });
        maxNumPlToSign++;
        let numPl = 0;
        let arrPosPlSecor = [];
//pl0
        let numPl0 = Math.trunc((rOut - rEl) * 2 * Math.PI / (12 * 2 * rEl));
        let rPl0 = rOut - rEl;
        for (let i = 0; i < numPl0; i++) {
            let pos = 30 / numPl0 * i + 30 / (numPl0 * 2);
            arrPosPlSecor.push([pos, rPl0]);
        }
        numPl = numPl + numPl0;
        let rIn = rPl0 - rEl;
// Positions of places for planets in the sign    
        if (numPl0 < maxNumPlToSign) {
            let numPl1 = Math.trunc((rOut - 3 * rEl) * 2 * Math.PI / (12 * 2 * rEl));
            let rPl1 = (rPl0 - 2 * rEl);
            for (let i = 0; i < numPl1; i++) {
                pos = 30 / numPl1 * i + 30 / (numPl1 * 2);
                arrPosPlSecor.push([pos, rPl1]);
            }
            numPl = numPl + numPl1;
            rIn = rPl1 - rEl;
            if ((numPl0 + numPl1) < maxNumPlToSign) {
                let numPl2 = Math.trunc((rOut - 5 * rEl) * 2 * Math.PI / (12 * 2 * rEl));
                let rPl2 = (rPl0 - 4 * rEl);
                for (let i = 0; i < numPl2; i++) {
                    pos = 30 / numPl2 * i + 30 / (numPl2 * 2);
                    arrPosPlSecor.push([pos, rPl2]);
                }
                numPl = numPl + numPl2;
                rIn = rPl2 - rEl;
                if ((numPl0 + numPl1 + numPl2) < maxNumPlToSign) {
                    let numPl3 = Math.trunc((rOut - 7 * rEl) * 2 * Math.PI / (12 * 2 * rEl));
                    let rPl3 = (rPl0 - 6 * rEl);
                    for (let i = 0; i < numPl3; i++) {
                        pos = 30 / numPl3 * i + 30 / (numPl3 * 2);
                        arrPosPlSecor.push([pos, rPl3]);
                    }
                    numPl = numPl + numPl2 + numPl3;
                    rIn = rPl2 - rEl;
                }
            }
        }
// Sort Positions of places for planets in the sign    
        arrPosPlSecor.sort((a, b) => {
            if (a[0] === b[0]) {
                return b[1] - a[1];
            }
            return (a[0] - b[0]);
        });
        return [arrPosPlSecor, rIn - rEl];
    }
    svg.drawPlanet = (parentEl, data, arrPosPlSecor, cx, cy, rEl, rInRadix, r2 = rInRadix, beginR) => {
        let arrPl = fAr.objToArray(data.planets);
        arrPl.forEach((el, index) => {
            el[2] = a2d.degreeToNumZod(el[1])[0];
            el[3] = a2d.degreeToNumZod(el[1])[1];
        });
        arrPl.sort((a, b) => {
            return a[1] - b[1];
        });
        let arrSignPl = [];
        for (let i = 0; i < 12; i++) {
            let subArr = [];
            arrPl.forEach((el, index) => {
                if (i === el[3]) {
                    subArr.push(el);
                }
            });
            if (subArr.length > 0)
                arrSignPl[i] = subArr;
        }
        ;
        arrSignPl.forEach((elP, index) => {
            let arrSignPlEl = elP;
            let  degPos = 30 / (arrPosPlSecor.length);
            for (let i = 0; i < (arrPosPlSecor.length); i++) {
                arrSignPlEl.forEach((el, index) => {
                    if ((el[2] >= (i * degPos)) && (el[2] < ((i + 1) * degPos))) {
                        el[4] = i;
                    }
                });
            }
            let pos = -1;
            arrSignPlEl.forEach((el, index) => {
                if (pos < el[4]) {
                    pos = el[4];
                } else {
                    pos = pos + 1;
                    el[4] = pos;
                }
            });
            let collison = pos - arrPosPlSecor.length + 1;
            if (collison > 0)
            {
                arrSignPlEl.reverse().some((el, index) => {
                    let decline = 0;
                    if (el[4] === (pos - index + decline)) {
                        el[4] = el[4] - collison;
                    } else {
                        decline = (pos - index + decline) - el[4];
                        collison = collison - decline;
                        if (collison <= 0) {
                            collison = 0;
                        }
                        el[4] = el[4] - collison;
                    }
                });
            }
        });
        arrSignPl.some((arrSignPlEl, index) => {
            arrSignPlEl.some((el, i) => {
                let posX = cx - (arrPosPlSecor[el[4]][1]) * Math.cos((el[3] * 30 + arrPosPlSecor[el[4]][0] - beginR).toRad());
                let posY = cy + (arrPosPlSecor[el[4]][1]) * Math.sin((el[3] * 30 + arrPosPlSecor[el[4]][0] - beginR).toRad());
                let posXL = cx - (arrPosPlSecor[el[4]][1] - svg.rEl) * Math.cos((el[3] * 30 + arrPosPlSecor[el[4]][0] - beginR).toRad());
                let posYL = cy + (arrPosPlSecor[el[4]][1] - svg.rEl) * Math.sin((el[3] * 30 + arrPosPlSecor[el[4]][0] - beginR).toRad());
                let posXR = cx - (r2) * Math.cos((el[1] - beginR).toRad());
                let posYR = cy + (r2) * Math.sin((el[1] - beginR).toRad());
                let posX0 = cx - (rInRadix - 2) * Math.cos((el[1] - beginR).toRad());
                let posY0 = cy + (rInRadix - 2) * Math.sin((el[1] - beginR).toRad());
                let posX1 = cx - (rInRadix + 2) * Math.cos((el[1] - beginR).toRad());
                let posY1 = cy + (rInRadix + 2) * Math.sin((el[1] - beginR).toRad());
                let r = (data.planets[el[0]][1] < 0) ? 'r' : '';
                fEl.crElSVG('line', parentEl, {x1: posXL, y1: posYL, x2: posXR, y2: posYR, stroke: "#777777", 'stroke-width': 1});
                svg.getSimvPlHInfo(parentEl, posX, posY, svg.plArr[a2d.planetSwe[el[0]]], Math.round(a2d.degreeToNumZod(el[1])[0]), r, rEl, svg.scalePl);
                fEl.crElSVG('line', parentEl, {x1: posX0, y1: posY0, x2: posX1, y2: posY1, stroke: "black", 'stroke-width': 2});
                if (rInRadix < r2) {
                    posX0 = cx - (r2 - 2) * Math.cos((el[1] - beginR).toRad());
                    posY0 = cy + (r2 - 2) * Math.sin((el[1] - beginR).toRad());
                    posX1 = cx - (r2 + 2) * Math.cos((el[1] - beginR).toRad());
                    posY1 = cy + (r2 + 2) * Math.sin((el[1] - beginR).toRad());
                    fEl.crElSVG('line', parentEl, {x1: posX0, y1: posY0, x2: posX1, y2: posY1, stroke: "black", 'stroke-width': 2});

                }
                ;
            });
        });

    };
    svg.drawHouse = (parentEl, arrH, cx, cy, rInRadix, rOutZ = svg.rOutZ, fill = '#DC143C', beginR = arrH[0]) => {
        arrH.forEach((el, index) => {
            let degree = (el - beginR).toRad();
            let posX = cx - (rOutZ + 10) * Math.cos(degree);
            let posY = cy + (rOutZ + 10) * Math.sin(degree);
            fEl.crElSVG('line', parentEl, {x1: cx - rInRadix * Math.cos(degree), y1: cy + rInRadix * Math.sin(degree), x2: cx - (rOutZ + 10) * Math.cos(degree), y2: cy + (rOutZ + 10) * Math.sin(degree), stroke: fill, fill: fill, 'stroke-width': 1});
            svg.getSimvPlHInfo(parentEl, posX, posY, svg.houseArr[index], Math.round(a2d.degreeToNumZod(el)[0]), '', svg.rEl, svg.scalePl, fill);
        });
    };
    svg.drawAspectR = (parentEl, aspArr, dataPl, cx, cy, rInRadix, beginR) => {
        aspArr.forEach((el, index) => {
            function midpoint(a, b) {
                return ((a + b) / 2);
            }
            let posX0 = cx - (rInRadix) * Math.cos((dataPl[el[0]][0] - beginR).toRad());
            let posY0 = cy + (rInRadix) * Math.sin((dataPl[el[0]][0] - beginR).toRad());
            let posX1 = cx - (rInRadix) * Math.cos((dataPl[el[1]][0] - beginR).toRad());
            let posY1 = cy + (rInRadix) * Math.sin((dataPl[el[1]][0] - beginR).toRad());
            fEl.crElSVG('line', parentEl, {x1: posX0, y1: posY0, x2: posX1, y2: posY1, stroke: svg.colorAsp[el[2]], 'stroke-width': (el[3] <= 1) ? 3 : 1});
            if ((el[2] !== 0) && (el[2] !== 180)) {
                let cAsp = [midpoint(posX0, posX1), midpoint(posY0, posY1)];
                svg.getSimv(cAsp[0], cAsp[1], svg.aspObj[el[2].toString() + 'd'], svg.rEl, parentEl, 0.5 * svg.scaleEl, svg.colorAsp[el[2]]);
            }
            ;
        });
    };
    svg.drawAspectT = (parentEl, aspArr, data, cx, cy, rInRadix, beginR) => {
        aspArr.forEach((el, index) => {
            function midpoint(a, b) {
                return ((a + b) / 2);
            }
            let posX0 = cx - (rInRadix) * Math.cos((data[0]['planets'][el[0]][0] - beginR).toRad());
            let posY0 = cy + (rInRadix) * Math.sin((data[0]['planets'][el[0]][0] - beginR).toRad());
            let posX1 = cx - (rInRadix) * Math.cos((data[1]['planets'][el[1]][0] - beginR).toRad());
            let posY1 = cy + (rInRadix) * Math.sin((data[1]['planets'][el[1]][0] - beginR).toRad());
            fEl.crElSVG('line', parentEl, {x1: posX0, y1: posY0, x2: posX1, y2: posY1, stroke: svg.colorAsp[el[2]], 'stroke-width': 1});
            if ((el[2] !== 0) && (el[2] !== 180)) {
                let cAsp = [midpoint(posX0, posX1), midpoint(posY0, posY1)];
                svg.getSimv(cAsp[0], cAsp[1], svg.aspObj[el[2].toString() + 'd'], svg.rEl, parentEl, 0.5 * svg.scaleEl, svg.colorAsp[el[2]]);
            }
            ;
        });
    };

    svg.drawInHoroscop = (parentEl, data, arrPosPlSecor, cx, cy, rElPl, rInRadix, rInZ, rOutZ) => {
        let g = fEl.crElSVG('g', parentEl, {id: 'Horoscop'});
        svg.drawZodiac(g, cx, cy, rInZ, rOutZ, rElPl, data.cusps[0]);
        svg.drawHouse(g, data.cusps, cx, cy, rInRadix, rOutZ + 40);
        svg.drawPlanet(g, data, arrPosPlSecor, cx, cy, rElPl, rInRadix, rInRadix, data.cusps[0]);
        let aspArr = a2d.aspectRadix(data);
        svg.drawAspectR(g, aspArr, data.planets, cx, cy, rInRadix - 2, data.cusps[0]);
        return g;
    };
    svg.drawOutHoroscop = (parentEl, data, arrPosPlSecor, cx, cy, rElPl, rInRadix, rInZ, rOutZ) => {
        let g = fEl.crElSVG('g', parentEl, {id: 'Horoscop'});
        svg.drawZodiac(g, cx, cy, rInZ, rOutZ, rElPl, data[0].cusps[0]);
        //radix
        svg.drawHouse(g, data[0].cusps, cx, cy, rInRadix, rOutZ + 40);
        svg.drawPlanet(g, data[0], arrPosPlSecor, cx, cy, rElPl, rInRadix, rInRadix, data[0].cusps[0]);
        //transit
        svg.drawHouse(g, data[1].cusps, cx, cy, rOutZ, rOutZ + 40, '#00008B', data[0].cusps[0]);
        let arr = svg.getNumPosPL(data[1], attrChart.rElPl, rOutZ + 30);
        let arrPosPlSecorT = arr[0];
        svg.drawPlanet(g, data[1], arrPosPlSecorT, cx, cy, rElPl, rInRadix, rOutZ, data[0].cusps[0]);
        fEl.crElSVG('circle', g, {cx: cx, cy: cy, r: rOutZ + 35, stroke: "#0080C0", 'stroke-width': 1, fill: "transparent"});
        aspArr = a2d.aspectTransit(data);
        svg.drawAspectT(g, aspArr, data, cx, cy, rInRadix - 2, data[0].cusps[0]);
        return g;
    };
    svg.reverseHoroscop = () => {
        let d = data[0];
        data[0] = data[1];
        data[1] = d;
        attrChart.data = data;
        svg.typeHoroscop();
    };

    svg.typeHoroscop = (parentEl = attrChart.parentEl, data = attrChart.data, arrPosPlSecor = attrChart.arrPosPlSecor, cx = attrChart.cx, cy = attrChart.cy, rElPl = attrChart.rElPl, rInRadix = attrChart.rInRadix, rInZ = attrChart.rInZ, rOutZ = attrChart.rOutZ, typeH = attrChart.typeH) => {
        a2d.PlStatistic(data[0]);
        fEl.remove('Horoscop');
        if (typeH === 't') {
            svg.drawOutHoroscop(parentEl, data, arrPosPlSecor, cx, cy, rElPl, rInRadix, rInZ, rOutZ);
            let x = 201;
            let y = attrChart.rEl;
            svg.drawInfo(x, y, fEl.getElId('Horoscop'), data[1]);
        } else {
            svg.drawInHoroscop(parentEl, data[0], arrPosPlSecor, cx, cy, rElPl, rInRadix, rInZ, rOutZ);
        }
        x = attrChart.rEl;
        y = attrChart.rEl;
        svg.drawInfo(x, y, fEl.getElId('Horoscop'), data[0]);
    }
    ;
    svg.drawTabAspL = (x, y, parentEl = attrChart.parentEl, data = attrChart.data[0], scaleInfo = 1) => {
        let plSt=a2d.PlStatistic(data);
        let gAsp = fEl.crElSVG('g', parentEl, {id: 'InfoAsp', transform: 'scale(1,1 )'});
        let arrPl = fAr.objToArray(data['planets']);
        let sizeAsp = 30 * scaleInfo;
        let widthAsp = sizeAsp;
        let heightAsp = sizeAsp * arrPl.length;
        y = y + sizeAsp;
        arrPl.forEach((el, i) => {
            //vertical

svg.getSimv(x, y + sizeAsp * (i + 1), svg.Symv[el[0]], svg.rEl, gAsp, scaleInfo, svg.colorAsp[plSt[el[0]][0]]);
            fEl.crElSVG('line', gAsp, {x1: x + sizeAsp * i + sizeAsp * 0.5, y1: y - sizeAsp * 0.5, x2: x + sizeAsp * i + sizeAsp * 0.5, y2: y + heightAsp + sizeAsp * 0.5, stroke: '#777777', 'stroke-width': 1});
            //horizontal
            fEl.crElSVG('line', gAsp, {x1: x - sizeAsp * 0.5, y1: y + sizeAsp * i + sizeAsp * 0.5, x2: x + heightAsp + sizeAsp * 0.5, y2: y + sizeAsp * i + sizeAsp * 0.5, stroke: '#777777', 'stroke-width': 1});
            svg.getSimv(x + sizeAsp * (i + 1), y, svg.Symv[el[0]], svg.rEl, gAsp, scaleInfo, '#000');
            ;
        });
        let arrAsp = a2d.aspectRadix(data);
        arrAsp.forEach((el, i) => {
            let posX1 = x + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[0])
            }));
            let posY1 = y + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[1])
            }));
            let posY2 = y + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[0])
            }));
            let posX2 = x + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[1])
            }));
            let svgel = svg.getSimv(posX1, posY1, svg.aspObj[el[2] + 'd'], svg.rEl, gAsp, scaleInfo, svg.colorAsp[el[2]]);
            svgel = svg.getSimv(posX2, posY2, svg.aspObj[el[2] + 'd'], svg.rEl, gAsp, scaleInfo, svg.colorAsp[el[2]]);
        });
        return gAsp;
    }
    svg.drawTabAspTRR = (x, y, parentEl = attrChart.parentEl, data = attrChart.data, scaleInfo = 1) => {
        let gAsp = fEl.crElSVG('g', parentEl, {id: 'InfoAsp', transform: 'scale(1,1 )'});
        let arrPl = fAr.objToArray(data['planets']);
        let sizeAsp = 30 * scaleInfo;
        let widthAsp = sizeAsp;
        let heightAsp = sizeAsp * arrPl.length;
        y = y + sizeAsp;
        arrPl.forEach((el, i) => {
            //vertical
            svg.getSimv(x, y + sizeAsp * (i + 1), svg.Symv[el[0]], svg.rEl, gAsp, scaleInfo, '#000');
            fEl.crElSVG('line', gAsp, {x1: x + sizeAsp * i + sizeAsp * 0.5, y1: y - sizeAsp * 0.5, x2: x + sizeAsp * i + sizeAsp * 0.5, y2: y + heightAsp + sizeAsp * 0.5, stroke: '#777777', 'stroke-width': 1});
            //horizontal
            fEl.crElSVG('line', gAsp, {x1: x - sizeAsp * 0.5, y1: y + sizeAsp * i + sizeAsp * 0.5, x2: x + heightAsp + sizeAsp * 0.5, y2: y + sizeAsp * i + sizeAsp * 0.5, stroke: '#777777', 'stroke-width': 1});
            svg.getSimv(x + sizeAsp * (i + 1), y, svg.Symv[el[0]], svg.rEl, gAsp, scaleInfo, '#000');
            ;
        });
        let arrAsp = a2d.aspectTransit(attrChart.data);
        arrAsp.forEach((el, i) => {
            let posX1 = x + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[0])
            }));
            let posY1 = y + sizeAsp * (1 + arrPl.findIndex((element, index) => {
                return(element[0] === el[1])
            }));
            let svgel = svg.getSimv(posX1, posY1, svg.aspObj[el[2] + 'd'], svg.rEl, gAsp, scaleInfo, svg.colorAsp[el[2]]);
        });
        return gAsp;
    }

    svg.drawInfo = (x, y, parentEl = attrChart.parentEl, data = attrChart.data[0]) => {
        let g = fEl.crElSVG('g', parentEl, {id: 'Info'});
        let scaleInfo = 0.6;
        y = y * scaleInfo;
        let plSt=a2d.PlStatistic(data);
        let fontSize = 30 * scaleInfo + 'px';
        let LanLong = a2d.getLanLong(data['user']['latitude'], data['user']['longitude']);
        let userData = a2d.getDSToDate(data['user']['userDate']).concat(LanLong);
        let ud = userData[0] + userData[1] + userData[2];
        let n0 = fEl.crElSVG('text', g, {x: x, y: y + (17) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fontSize, textContent: ud});
        y = y + 26 * scaleInfo;
        ud = userData[3] + userData[4] + userData[5];
        let n1 = fEl.crElSVG('text', g, {x: x, y: y + (17) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fontSize, textContent: ud});
        let el = fEl.getElId('chart');
        if (x > 200)
            fEl.setXRight(g, el, attrChart.scale);
        y = y + 4 * scaleInfo;
        let g1 = fEl.crElSVG('g', parentEl, {id: 'InfoPlH'});
        let arrPl = fAr.objToArray(data['planets']);
        arrPl.forEach((el, i) => {
            y = y + 30 * scaleInfo;
            svg.drawPlInfo(x, y, el, g1, scaleInfo, fontSize,svg.colorAsp[plSt[el[0]][0]]);
        });
        data['cusps'].forEach((el, i) => {
            y = y + 30 * scaleInfo;
            svg.drawHInfo(x, y, el, i, g1, scaleInfo, fontSize);
        });
        if (x > 200)
            fEl.setXRight(g1, el, attrChart.scale);
        if (x <= 200) {
            let gAsp = svg.drawTabAspL(x, y, parentEl, data, scaleInfo);
            fEl.setYEnd(gAsp, el, attrChart.scale);

        } else {
            gAsp = svg.drawTabAspTRR(x, y, parentEl, data, scaleInfo);
            fEl.setXYEnd(gAsp, el, attrChart.scale);
    }
    };

    svg.drawPlInfo = (dx = 24, dy = 24, elP, g = attrChart.parentEl, scaleInfo, fs=30 ,fill='#000') => {
        let plZ = a2d.getDegMinToNumZod(elP[1]);
        let x = dx;
        let y = dy;
        svg.getSimv(x, y + 3, svg.Symv[elP[0]], attrChart.rEl, g, scaleInfo, fill);
        fEl.crElSVG('text', g, {x: (x + (2 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[0]});
        svg.getSimv((x + (5 * attrChart.rEl + 10) * scaleInfo), y + 3, svg.signArr[plZ[2]][1], attrChart.rEl, g, scaleInfo, '#000');
        fEl.crElSVG('text', g, {x: (x + (7 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[1]});
        if (elP[2] < 0) {
            let n4 = fEl.crElSVG('text', g, {x: (x + (10 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: 'R'});
        }
        ;
    };
    svg.drawHInfo = (dx = 24, dy = 24, elP, i, g = attrChart.parentEl, scaleInfo, fs) => {
        plZ = a2d.getDegMinToNumZod(elP);//getDegMinToNumZod
        let x = dx;
        let y = dy;
        svg.getSimv(x, y, svg.houseArr[i][1], attrChart.rEl, g, scaleInfo, '#000');//svg.houseArr[0]
        fEl.crElSVG('text', g, {x: (x + (2 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[0]});
        svg.getSimv(x + ((5 * attrChart.rEl + 10) * scaleInfo), y, svg.signArr[plZ[2]][1], attrChart.rEl, g, scaleInfo, '#000');
        fEl.crElSVG('text', g, {x: (x + (7 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[1]});
    };
    svg.drawAsplInfo = (dx = 24, dy = 24, elP, g = attrChart.parentEl, scaleInfo, fs) => {
        plZ = a2d.getDegMinToNumZod(elP[1]);
        let x = dx;
        let y = dy;
        svg.getSimv(x, y + 3, svg.Symv[elP[0]], attrChart.rEl, g, scaleInfo, '#000');
        fEl.crElSVG('text', g, {x: (x + (2 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[0]});
        svg.getSimv((x + (5 * attrChart.rEl + 10) * scaleInfo), y + 3, svg.signArr[plZ[2]][1], attrChart.rEl, g, scaleInfo, '#000');
        fEl.crElSVG('text', g, {x: (x + (7 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: plZ[1]});
        if (elP[2] < 0) {
            let n4 = fEl.crElSVG('text', g, {x: (x + (10 * attrChart.rEl) * scaleInfo), y: y + (10) * scaleInfo, fill: '#000', 'font-family': "sans-serif", 'font-size': fs, textContent: 'R'});
        }
        ;
    };
    svg.drawChart = (parentEl, astroDate, atCh = attrChart) => {
        let vb = fEl.crElSVG('svg', parentEl, {id: 'grCard', height: atCh.vbh, width: atCh.vbw});
        let gChart = fEl.crElSVG('g', vb, {id: 'chart', transform: 'scale(' + atCh.scale + ')'});
        fEl.crElSVG('rect', gChart, {width: atCh.vbw / atCh.scale, height: atCh.vbh / atCh.scale, fill: "#E8E8E8"});
        atCh.cx = atCh.vbw / (2 * atCh.scale);
        atCh.cy = atCh.vbh / (2 * atCh.scale);
        atCh.parentEl = gChart;
        atCh.rEl = svg.rEl;
        atCh.rElPl = svg.rEl * svg.scalePl;
        let arr = svg.getNumPosPL(astroDate[0], atCh.rElPl, svg.rOutR);
        atCh.arrPosPlSecor = arr[0];
        atCh.rInRadix = (arr[1] < svg.rInR) ? arr[1] : svg.rInR;
        atCh.data = astroDate;
        atCh.rInZ = svg.rInZ;
        atCh.rOutZ = svg.rOutZ;
        fEl.crElSVG('circle', atCh.parentEl, {cx: atCh.cx, cy: atCh.cy, r: atCh.rInRadix, stroke: "#0080C0", 'stroke-width': 1, fill: "transparent"});
        svg.typeHoroscop(atCh.parentEl, atCh.data, atCh.arrPosPlSecor, atCh.cx, atCh.cy, atCh.rElPl, atCh.rInRadix, rInZ = attrChart.rInZ, atCh.rOutZ);
        return vb;
    };

}(window.astrology2D = window.astrology2D || {})
        );

